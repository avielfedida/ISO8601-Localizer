{"version":3,"sources":["ISO8601-Localizer.js"],"names":["arrays","monthsDays","classes","Ranger","prototype","getRange","start","end","notBothNegativeTmp","bothNegativeTmp","bothNegativeFlag","retArray","Math","abs","i","push","ISO8601Localizer","userISO8601","this","ISO8601Pattern","userOffset","Date","getTimezoneOffset","to","offset","validOffset","errorThrower","localize","upperCaseISO8601","toUpperCase","isValid","_a","getOffset","offsetHours","operator","matchStrings","match","fullMatch","shift","matchNumbers","map","val","parseInt","year","month","day","hour","minute","second","leapYear","isLeapYear","daysInMonth","isLogical","previousMonthDIM","newHour","addDays","floor","remainingHours","newDay","newMonth","decreaseDays","ISO8601","slice","stringedISO8601","k","toStringISO8601","toString","length","errorCode","maxDays","RangerInstance","validOffsets","indexOf","maybeValid","test"],"mappings":"AAAA,GAAAA,SACA,SAAAA,GACAA,EAAAC,YACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAEAD,SAAAA,WACA,IAAAE,UACA,SAAAA,GACA,GAAAC,GAAA,WACA,QAAAA,MAkDA,MAhDAA,GAAAC,UAAAC,SAAA,SAAAC,EAAAC,GAoBA,GAAAC,GAAA,KAAAC,EAAA,KAAAC,GAAA,EAAAC,IACA,GAAAL,GAAA,EAAAC,GACAD,EAAAM,KAAAC,IAAAP,GACAC,EAAAK,KAAAC,IAAAN,GACAG,GAAA,EACAJ,EAAAC,IACAE,EAAAF,EACAA,EAAAD,EACAA,EAAAG,IAIAH,EAAAC,IACAC,EAAAD,EACAA,EAAAD,EACAA,EAAAE,EAGA,KAAA,GAAAM,GAAAR,EAAAC,GAAAO,EAAAA,IAEAH,EAAAI,KADAL,GACAI,EAGAA,EAGA,OAAAH,IAEAR,IAEAD,GAAAC,OAAAA,GACAD,UAAAA,YAKA,IAAAD,YAAAD,OAAAC,WACAE,OAAAD,QAAAC,OACAa,iBAAA,WACA,QAAAA,GAAAC,GACAC,KAAAC,eAAA,2EACAD,KAAAD,YAAAA,EACAC,KAAAE,YAAA,GAAAC,OAAAC,oBAAA,IAuJA,MApJAN,GAAAZ,UAAAmB,GAAA,SAAAC,GAMA,MALAN,MAAAO,YAAAD,IACAN,KAAAQ,aAAA,GAGAR,KAAAE,WAAAI,EACAN,MAEAF,EAAAZ,UAAAuB,SAAA,WACA,GAAAC,GAAAV,KAAAD,YAAAY,aACAX,MAAAY,QAAAF,IACAV,KAAAQ,aAAA,EAEA,IAAAK,GAAAb,KAAAc,YAAAC,EAAAF,EAAAE,YAAAC,EAAAH,EAAAG,SACAC,EAAAP,EAAAQ,MAAAlB,KAAAC,gBACAkB,EAAAF,EAAAG,QACAC,EAAAJ,EAAAK,IAAA,SAAAC,GACA,MAAAC,UAAAD,KAEAE,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAA,GACAU,EAAA/B,KAAAgC,WAAAP,GACAQ,EAAAlD,WAAA2C,EAAA,EACAK,IAAA,IAAAL,IACAO,EAAA,IAEAjC,KAAAkC,UAAAD,EAAAN,IACA3B,KAAAQ,aAAA,EAEA,IAAA2B,GAAA,WAEA,MAAA,GAAAT,EAAA,EACA3C,WAAA,IAAA2C,EAAA,IAEA3C,WAAA2C,EAAA,KAKA,IAHAK,GAAA,IAAAL,IACAS,EAAA,IAEA,MAAAnB,EACA,MAAAG,EAEA,IAAA,MAAAH,EAAA,CACA,GAAAoB,GAAAR,GAAAb,CACA,IAAAqB,EAAA,GAAA,CACA,GAAAC,GAAA3C,KAAA4C,MAAAF,EAAA,IACAG,EAAAX,EAAAQ,EAAA,GACAI,EAAAb,GAAAU,CACA,IAAAG,EAAAP,EAAA,CACA,GACAQ,IADAd,EAAAa,EAAAP,EACAP,GAAA,EACA,IAAAe,EAAA,GACA,CAAAf,EAAA,EACAD,GAAA,KAKA,GAAA,MAAAT,EAAA,CACA,GAAAoB,GAAAR,GAAAb,CACA,IAAA,EAAAqB,EAAA,CACAA,EAAA1C,KAAAC,IAAAyC,GAAA,EACA,IAAAM,GAAAhD,KAAA4C,MAAAF,EAAA,IACAG,EAAAX,EAAA,GAAAQ,EAAA,EACA,KAAAA,IACAM,EAAA,EACAH,EAAAX,EAAA,EAEA,IAAAY,GAAAb,GAAAe,CACA,IAAA,EAAAF,EAAA,CACA,GACAC,IADAd,EAAAQ,EAAAK,EACAd,GAAA,EACA,IAAA,EAAAe,EACA,CAAAf,EAAA,GACAD,GAAA,KAKA,GAAAkB,IAAAlB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAc,MAAA,GACAC,IACA,KAAA,GAAAC,KAAAH,GAAA,CACA,GAAAI,GAAAJ,EAAAG,GAAAE,UACAH,GAAAhD,KAAA,IAAAkD,EAAAE,OAAA,IAAAF,EAAAA,GAEA,MAAAF,GAAA,GAAA,IACAA,EAAA,GAAA,IACAA,EAAA,GAAA,IACAA,EAAA,GAAA,IACAA,EAAA,GAAA,IACAA,EAAA,IAEA/C,EAAAZ,UAAAsB,aAAA,SAAA0C,GACA,OAAAA,GACA,IAAA,GACA,KAAA,8DAEA,KAAA,GACA,KAAA,wFAEA,KAAA,GACA,KAAA,kEAEA,SACA,KAAA,uBAGApD,EAAAZ,UAAAgD,UAAA,SAAAiB,EAAAxB,GACA,MAAAwB,IAAAxB,GAEA7B,EAAAZ,UAAA4B,UAAA,WACA,GAAAR,GAAAN,KAAAE,UACA,QACAc,SAAA,WACA,MAAAV,GAAA,EACA,IAEA,EAAAA,EACA,IAGA,OAGAS,YAAArB,KAAAC,IAAAW,KAGAR,EAAAZ,UAAAqB,YAAA,SAAAD,GACA,GAAA8C,GAAA,GAAAnE,QACAoE,EAAAD,EAAAjE,SAAA,IAAA,GACA,OAAAkE,GAAAC,QAAAhD,GAAA,IAAA,GAAA,GAEAR,EAAAZ,UAAA0B,QAAA,SAAA2C,GACA,MAAAvD,MAAAC,eAAAuD,KAAAD,IAEAzD,EAAAZ,UAAA8C,WAAA,SAAAP,GAUA,MAAAA,GAAA,IAAA,GAAAA,EAAA,MAAA,GAEAA,EAAA,IAAA,GAAAA,EAAA,MAAA,GAAAA,EAAA,MAAA,GAEA3B","file":"build.min.js","sourcesContent":["var arrays;\r\n(function (arrays) {\r\n    arrays.monthsDays = [\r\n        31,\r\n        28,\r\n        31,\r\n        30,\r\n        31,\r\n        30,\r\n        31,\r\n        31,\r\n        30,\r\n        31,\r\n        30,\r\n        31\r\n    ];\r\n})(arrays || (arrays = {}));\r\nvar classes;\r\n(function (classes) {\r\n    var Ranger = (function () {\r\n        function Ranger() {\r\n        }\r\n        Ranger.prototype.getRange = function (start, end) {\r\n            /*\r\n            There are 6 parameters combination:\r\n      \r\n            1. (5, 7)\r\n            2. (7, 5)\r\n            3. (7, 7)\r\n            4. (-5, -7)\r\n            5. (-7, -5)\r\n            6. (-7, -7)\r\n            7. (5, -7)\r\n            8. (-7, 5)\r\n      \r\n            This function will return an ordered range for the parameters, for example:\r\n      \r\n            (5, 7) or (7, 5) => [5,6,7]\r\n            (-7, 5) or (5, -7) => [-7,-6,-5,-4,-3,-2,-1,0,1,2,4,5]\r\n            (-7, -7) => [-7]\r\n            (5, 5) => [5]\r\n            */\r\n            var notBothNegativeTmp = null, bothNegativeTmp = null, bothNegativeFlag = false, retArray = [];\r\n            if (start < 0 && end < 0) {\r\n                start = Math.abs(start);\r\n                end = Math.abs(end);\r\n                bothNegativeFlag = true;\r\n                if (start > end) {\r\n                    bothNegativeTmp = end;\r\n                    end = start;\r\n                    start = bothNegativeTmp;\r\n                }\r\n            }\r\n            else {\r\n                if (start > end) {\r\n                    notBothNegativeTmp = end;\r\n                    end = start;\r\n                    start = notBothNegativeTmp;\r\n                }\r\n            }\r\n            for (var i = start; i <= end; i++) {\r\n                if (bothNegativeFlag) {\r\n                    retArray.push(-i);\r\n                }\r\n                else {\r\n                    retArray.push(i);\r\n                }\r\n            }\r\n            return retArray;\r\n        };\r\n        return Ranger;\r\n    })();\r\n    classes.Ranger = Ranger;\r\n})(classes || (classes = {}));\r\n/// <reference path=\"typings/tsd.d.ts\" />\r\n/// <reference path=\"lib/interfaces.ts\" />\r\n/// <reference path=\"lib/arrays.ts\" />\r\n/// <reference path=\"lib/classes.ts\" />\r\nvar monthsDays = arrays.monthsDays;\r\nvar Ranger = classes.Ranger;\r\nvar ISO8601Localizer = (function () {\r\n    function ISO8601Localizer(userISO8601) {\r\n        this.ISO8601Pattern = /(\\d{4})-([0-1][0-9])-([0-3][0-9])T([0-2][0-9]):([0-5][0-9]):([0-5][0-9])/;\r\n        this.userISO8601 = userISO8601;\r\n        this.userOffset = new Date().getTimezoneOffset() / -60;\r\n        ;\r\n    }\r\n    ISO8601Localizer.prototype.to = function (offset) {\r\n        if (!this.validOffset(offset)) {\r\n            this.errorThrower(0);\r\n        }\r\n        ;\r\n        this.userOffset = offset;\r\n        return this;\r\n    };\r\n    ISO8601Localizer.prototype.localize = function () {\r\n        var upperCaseISO8601 = this.userISO8601.toUpperCase();\r\n        if (!this.isValid(upperCaseISO8601)) {\r\n            this.errorThrower(1);\r\n        }\r\n        var _a = this.getOffset(), offsetHours = _a.offsetHours, operator = _a.operator;\r\n        var matchStrings = upperCaseISO8601.match(this.ISO8601Pattern);\r\n        var fullMatch = matchStrings.shift();\r\n        var matchNumbers = matchStrings.map(function (val) {\r\n            return parseInt(val);\r\n        });\r\n        var year = matchNumbers[0], month = matchNumbers[1], day = matchNumbers[2], hour = matchNumbers[3], minute = matchNumbers[4], second = matchNumbers[5];\r\n        var leapYear = this.isLeapYear(year);\r\n        var daysInMonth = monthsDays[month - 1];\r\n        if (leapYear && month === 2) {\r\n            daysInMonth = 29;\r\n        }\r\n        if (!this.isLogical(daysInMonth, day)) {\r\n            this.errorThrower(2);\r\n        }\r\n        var previousMonthDIM = (function () {\r\n            // The -2 used because -1 due to monthsDays have 0 index and -1 because we need the previous month.\r\n            if (month - 2 < 0) {\r\n                return monthsDays[12 + (month - 2)];\r\n            }\r\n            return monthsDays[month - 2];\r\n        })();\r\n        if (leapYear && month === 3) {\r\n            previousMonthDIM = 29;\r\n        }\r\n        if (operator === '=') {\r\n            return fullMatch;\r\n        }\r\n        if (operator === '+') {\r\n            var newHour = hour = hour + offsetHours;\r\n            if (newHour > 23) {\r\n                var addDays = Math.floor(newHour / 24);\r\n                var remainingHours = hour = newHour % 24;\r\n                var newDay = day = day + addDays;\r\n                if (newDay > daysInMonth) {\r\n                    var newerDay = day = newDay - daysInMonth;\r\n                    var newMonth = month = month + 1;\r\n                    if (newMonth > 12) {\r\n                        var newerMonth = month = 1;\r\n                        var newYear = year = year + 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (operator === '-') {\r\n            var newHour = hour = hour - offsetHours;\r\n            if (newHour < 1) {\r\n                newHour = Math.abs(newHour) + 24;\r\n                var decreaseDays = Math.floor(newHour / 24);\r\n                var remainingHours = hour = 24 - (newHour % 24);\r\n                if (newHour === 0) {\r\n                    decreaseDays = 1;\r\n                    remainingHours = hour = 0;\r\n                }\r\n                var newDay = day = day - decreaseDays;\r\n                if (newDay < 1) {\r\n                    var newerDay = day = previousMonthDIM + newDay;\r\n                    var newMonth = month = month - 1;\r\n                    if (newMonth < 1) {\r\n                        var newerMonth = month = 12;\r\n                        var newYear = year = year - 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var ISO8601 = [year, month, day, hour, minute, second].slice(0);\r\n        var stringedISO8601 = [];\r\n        for (var k in ISO8601) {\r\n            var toStringISO8601 = ISO8601[k].toString();\r\n            stringedISO8601.push(toStringISO8601.length === 1 ? \"0\" + toStringISO8601 : toStringISO8601);\r\n        }\r\n        return stringedISO8601[0] + '-' +\r\n            stringedISO8601[1] + '-' +\r\n            stringedISO8601[2] + 'T' +\r\n            stringedISO8601[3] + ':' +\r\n            stringedISO8601[4] + ':' +\r\n            stringedISO8601[5];\r\n    };\r\n    ISO8601Localizer.prototype.errorThrower = function (errorCode) {\r\n        switch (errorCode) {\r\n            case 0:\r\n                throw 'Invalid offset supplied, valid offsets are between -11 to 14';\r\n                break;\r\n            case 1:\r\n                throw 'Invalid ISO8601, try something like(case insensitive, T may be t): 2005-06-03T13:04:32';\r\n                break;\r\n            case 2:\r\n                throw 'Non logical date, please check that there are X days in month Y.';\r\n                break;\r\n            default:\r\n                throw 'Unknow error code.';\r\n        }\r\n    };\r\n    ISO8601Localizer.prototype.isLogical = function (maxDays, day) {\r\n        return day <= maxDays;\r\n    };\r\n    ISO8601Localizer.prototype.getOffset = function () {\r\n        var offset = this.userOffset;\r\n        return {\r\n            operator: (function () {\r\n                if (offset > 0) {\r\n                    return '+';\r\n                }\r\n                else if (offset < 0) {\r\n                    return '-';\r\n                }\r\n                else {\r\n                    return '=';\r\n                }\r\n            })(),\r\n            offsetHours: Math.abs(offset)\r\n        };\r\n    };\r\n    ISO8601Localizer.prototype.validOffset = function (offset) {\r\n        var RangerInstance = new Ranger();\r\n        var validOffsets = RangerInstance.getRange(-11, 14);\r\n        return validOffsets.indexOf(offset) > -1 ? true : false;\r\n    };\r\n    ISO8601Localizer.prototype.isValid = function (maybeValid) {\r\n        return this.ISO8601Pattern.test(maybeValid);\r\n    };\r\n    ISO8601Localizer.prototype.isLeapYear = function (year) {\r\n        /*\r\n            Mathisfun(https://www.mathsisfun.com/leap-years.html):\r\n\r\n            \"\r\n            Leap Years are any year that can be evenly divided by 4 (such as 2012, 2016, etc),\r\n            except if it can can be evenly divided by 100, then it isn't (such as 2100, 2200, etc),\r\n            except if it can be evenly divided by 400, then it is (such as 2000, 2400).\r\n            \"\r\n        */\r\n        return ((year % 4 === 0 && year % 100 !== 0)\r\n            ||\r\n                (year % 4 === 0 && year % 100 === 0 && year % 400 === 0));\r\n    };\r\n    return ISO8601Localizer;\r\n})();\r\n"],"sourceRoot":"/source/"}