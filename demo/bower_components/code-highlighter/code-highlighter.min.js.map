{"version":3,"sources":["code-highlighter.js"],"names":["window","document","undefined","init","valuables","sheet","utils","getSheet","addCSSRule","codeClassName","linesClassName","removeListener","outerKey","Keywords","categories","innerKey","shortArray","withMeaning","multiMeaning","multiMeaningInnerKey","index","indexOf","fixFixer","meaningInnerKey","textAreaElements","getElementsByTagName","i","length","hasClass","colorScheme","defaultColorScheme","colorSchemeAttribute","getAttribute","validScheme","j","schemeKey","colorSchemes","consoleLog","trim","toLowerCase","syntaxAttribute","urlAttribute","syntax","syntaxKey","validSyntaxes","currentSyntax","insertedColorSchemes","ruleName","dataPatt","test","linesRuleName","selector","rulesCollection","queryRuleName","savedContent","innerHTML","newPreElement","createElement","newCodeElement","appendChild","style","setProperty","className","hasAttribute","setAttribute","parentNode","replaceChild","getByAjax","responseText","element","buildElement","content","url","elementStyle","codeElementStyles","uncamelize","attr","attrVal","empty","ruleValueKey","required","formatContent","lineHeight","getLineHeight","paddingTop","parseInt","getStyle","paddingBot","paddingLeft","linesContainer","defaultUnit","u","units","unitIndex","unitCoefficient","parseFloat","slice","NaN","numberOfLines","getNumberOfLines","lines","fixMePattern","keyword","source","replace","match","subPattern","before","after","msg","isError","console","log","callbackSuccess","callbackUntilSuccess","xhr","XMLHttpRequest","ActiveXObject","open","setRequestHeader","onreadystatechange","readyState","status","send","e","tinyInBetween","value","callback","noSpans","inBetween","union","callbacksArray","key","hasOwnProperty","getHex","getUnits","joinedUnits","join","RegExp","getNamedValues","getRules","rules","rule","ruleValue","returnedRule","getStrings","getNumbers","getSelectors","getAttributes","attributes","getMarkups","fullRest","type","tagName","getDocType","getImport","getKeywords","category","currentKeywords","toUpperCase","matchAndSubPatterns","arguments","currentValue","indexOfSubPattern","unshift","getComments","getFunctions","rest","appendedRegExp","finalRegExp","javascriptIdentifierRegex","getVariables","getInsidePhp","preservedSpaces","openingClosingScriptTag","optionalPhpOrEqualSign","scriptContent","getInsideStylesheet","stylesheetContent","getInsideJavascript","runAgain","nextContent","returnedContent","typeSearch","openScriptTag","closeScriptTag","trimedTypeSearch","replacement","defaultType","substr","inBetweenAllSteps","rootCall","steps","push","repetitiveRulesObjects","text-shadow","background","color","border-right","background-color","padding","opacity","repetitiveObjects","nativePattern","javascriptKeywords","array","in","let","default","from","phpKeywords","implements","or","clone","echo","and","eval","function","class","if","for","case","var","return","do","as","::selection","::-moz-selection"," span::selection"," span::-moz-selection"," span[data-keyword-fc]::selection"," span[data-keyword-fc]::-moz-selection"," span[data-keyword-sc]::selection"," span[data-keyword-sc]::-moz-selection"," span[data-keyword-tc]::selection"," span[data-keyword-tc]::-moz-selection","scroll","down","overflow-y","overflow-x","word-wrap","white-space","overflow-wrap","absWidth","-webkit-box-sizing","-moz-box-sizing","box-sizing","apple","data-rest","data-string","data-keyword-fc","data-keyword-sc","data-keyword-tc","data-comment","data-markup","data-attribute","data-selector","data-variable","data-function","data-number","data-rule","data-hex","data-unit","data-named-value","data-import","data-doctype","selectorUnderScheme","orange","olive","peach","banana","mango","melon","addListener","el","fn","addEventListener","removeEventListener","getLastLineWidth","lastLine","textNodeFromContent","createTextNode","spanElement","width","offsetWidth","removeChild","div","offsetHeight","str","camelize","letter","styleProp","camilized","returnedStyle","defaultView","getComputedStyle","getPropertyValue","getHeight","scrollH","scrollHeight","fix","height","lastLineWidth","secondHeight","secondNumberOfLines","secondLastLineWidth","isNative","checkMe","arrayToShort","sort","a","b","cssRules","insertRule","classToCheck","patt","FC","SC","TC"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,GAEA,YA+1BA,SAAAC,KAGAC,EAAAC,MAAAC,EAAAC,WAKAD,EAAAE,WAAAJ,EAAAC,MAAA,IAAAD,EAAAK,cAaA,qFAOAH,EAAAE,WAAAJ,EAAAC,MAAA,IAAAD,EAAAK,cAAA,KAAAL,EAAAM,eAGA,iQAmBAJ,EAAAE,WAAAJ,EAAAC,MAAA,IAAAD,EAAAK,cAAA,KAAAL,EAAAM,eAAA,QAEA,6FAWAJ,EAAAK,eAAAX,EAAA,OAAAG,EAMA,KAAA,GAAAS,KAAAC,GAAA,CAQA,GAAAC,GAAAD,EAAAD,EAEA,KAAA,GAAAG,KAAAD,GAMAR,EAAAU,WAAAF,EAAAC,IAiCA,GAAAX,EAAAa,YAAAC,aAEA,IAAA,GAAAC,KAAAf,GAAAa,YAAAC,aAEA,IAAAN,IAAAC,GAAA,CAEAC,EAAAD,EAAAD,EAEA,KAAAG,IAAAD,GAAA,CAEA,GAAAM,GAAAN,EAAAC,GAAAM,QAAAF,EAEAC,GAAA,KAEAN,EAAAC,GAAAK,GAAAE,EAAAlB,EAAAa,YAAAC,aAAAC,GAAAL,EAAAC,GAAAK,MAaA,IAAAR,IAAAR,GAAAa,YAGA,GAAAJ,EAAAD,GAAA,CAEAE,EAAAD,EAAAD,EAEA,KAAAG,IAAAD,GAEA,IAAA,GAAAS,KAAAnB,GAAAa,YAAAL,GAAA,CAEA,GAAAQ,GAAAN,EAAAC,GAAAM,QAAAE,EAEAH,GAAA,KAEAN,EAAAC,GAAAK,GAAAE,EAAAlB,EAAAa,YAAAL,GAAAW,GAAAT,EAAAC,GAAAK,MAeA,IAHA,GAAAI,GAAAvB,EAAAwB,qBAAA,YACAC,EAAAF,EAAAG,OAEAD,KAEA,GAAApB,EAAAsB,SAAAJ,EAAAE,GAAAtB,EAAAK,eAAA,CAEA,GAAAoB,GAAA,WAEA,GAAAC,GAAA,KAEAC,EAAAP,EAAAE,GAAAM,aAAA,qBACAC,GAAA,EAEAC,EAAA,CAEA,KAAA,GAAAC,KAAAC,GAAA,CAEA,GAAA,IAAAF,IAEAJ,EAAAM,EAAAD,IAEAJ,GAAA,CAGAE,GAAA,EAEAI,EAAA,mEAEA,OASA,GAAAN,EAAAO,OAAAC,gBAAAJ,EAAA,CAEAF,GAAA,EAEAH,EAAAM,EAAAD,EAEA,OAIAD,IAKA,OAAAC,EAAAL,EAAAG,MAIAO,EAAAhB,EAAAE,GAAAM,aAAA,cAEA,IAAAQ,EAAA,CAEA,GAAAC,GAAAjB,EAAAE,GAAAM,aAAA,YACAU,EAAA,IAEA,KAAA,GAAAC,KAAAvC,GAAAwC,cAAA,CAEA,GAAAC,GAAAzC,EAAAwC,cAAAD,EAGA,IAAAH,EAAAF,SAAAO,EAAA,CAEAH,EAAAG,CAEA,QAKA,GAAAH,EAEA,GAAAb,EAAA,GAAA,CAeA,IAAAzB,EAAA0C,qBAAAjB,EAAA,IAAA,CAEAzB,EAAA0C,qBAAAjB,EAAA,KAAA,CAGA,KAAA,GAAAkB,KAAAlB,GAAA,GAWA,GAAAzB,EAAA4C,SAAAC,KAAAF,GA2DAzC,EAAAE,WAAAJ,EAAAC,MAEA,IAAAD,EAAAK,cAAA,IAAAoB,EAAA,GAAA,KAAAkB,EAAA,IACA,SAAAlB,EAAA,GAAAkB,QA5DA,QAAAA,GAEA,IAAA,QAEA,IAAA,GAAAG,KAAArB,GAAA,GAAAkB,GAEAzC,EAAAE,WAAAJ,EAAAC,MAMA,IAAAD,EAAAK,cACA,IAAAoB,EAAA,GACA,KACAzB,EAAAM,eACAwC,EAAA,IAAArB,EAAA,GAAAkB,GAAAG,GAIA,MAEA,KAAA,sBAEA,IAAA,GAAAC,KAAAtB,GAAA,GAAAkB,GAAA,CAEA,GAAAK,GAAA,EAEA,KAAA,GAAAC,KAAAxB,GAAA,GAAAkB,GAAAI,GAEAC,GAAAC,EAAA,IAAAxB,EAAA,GAAAkB,GAAAI,GAAAE,GAAA,GAIA/C,GAAAE,WAAAJ,EAAAC,MACA,IAAAD,EAAAK,cACA,IAAAoB,EAAA,GACAsB,EACAC,GAIA,KAEA,SAGA9C,EAAAE,WAAAJ,EAAAC,MAEA,IAAAD,EAAAK,cAAA,IAAAoB,EAAA,GACAkB,EAAA,IAAAlB,EAAA,GAAAkB,KAsBA,GAAAO,GAAA9B,EAAAE,GAAA6B,UACAC,EAAAvD,EAAAwD,cAAA,OACAC,EAAAF,EAAAG,YAAA1D,EAAAwD,cAAA,QAOAD,GAAAI,MAAAC,YAAA,SAAA,IAAA,aAMAL,EAAAI,MAAAC,YAAA,QAAA,OAAA,aAIAH,EAAAI,UAAAtC,EAAAE,GAAAoC,UAAA,IAAAjC,EAAA,GAEAL,EAAAE,GAAAqC,aAAA,eAGAL,EAAAM,aAAA,aAAAxC,EAAAE,GAAAM,aAAA,eAIAR,EAAAE,GAAAqC,aAAA,OAGAL,EAAAM,aAAA,KAAAxC,EAAAE,GAAAM,aAAA,OAIAR,EAAAE,GAAAqC,aAAA,gBAEAL,EAAAM,aAAA,cAAAxC,EAAAE,GAAAM,aAAA,gBAIAR,EAAAE,GAAAqC,aAAA,mBAEAL,EAAAM,aAAA,iBAAA,IAIAxC,EAAAE,GAAAuC,WAAAC,aAAAV,EAAAhC,EAAAE,IAEAe,EAGA0B,EAAA1B,EAAAiB,EAAAhB,EAAA,SAAA0B,EAAA1B,EAAA2B,GAEAC,EAAAD,EAAAD,EAAA1B,EAAAD,IAEA,SAAA4B,GAEAA,EAAAd,UAAA,8CAYAe,EAAAZ,EAAAJ,EAAAZ,EAAA,UAMAL,GAAA,4DAAA,OAMAA,GAAA,gDAAA,OAMAA,GAAA,uDAAA,IAUA,QAAAiC,GAAAD,EAAAE,EAAA7B,EAAA8B,GAEA,IAAA,GAAAC,KAAAC,GAAA,EAEAA,EAAAD,GAAA,QAAAvE,GACAwE,EAAAD,GAAA,WAAAvE,IAMAmC,EAAAoC,EAAA,0EAAA,EAKA,IAAAE,GAAArE,EAAAqE,WAAAF,GAEAG,EAAA,QAAAD,CAEA,IAAAN,EAAAN,aAAAa,GAAA,CAEA,GAAAC,GAAAR,EAAArC,aAAA4C,GAAArC,aAeA,IAAAmC,EAAAD,GAAAK,SAAA,GAEA,IAAA,GAAA/B,KAAA2B,GAAAD,GAGA,GAAA,SAAA1B,GAAA,UAAAA,EASA,GAAA,eAAA2B,GAAAD,GAAA1B,GAEA,IAAA,GAAAgC,KAAAL,GAAAD,GAAA1B,GAEAsB,EAAAT,MAAAC,YAAAd,EAAA2B,EAAAD,GAAA1B,GAAAgC,GAAA,iBAMAV,GAAAT,MAAAC,YAAAd,EAAA2B,EAAAD,GAAA1B,GAAA,iBAmBA,IAVA,KAAA8B,GAEAxC,EAAA,iBAAAuC,EAAA,UAAA,GAQAF,EAAAD,GAAAI,GAAA,EAGA,SAAAA,GAAA,aAAAA,IAEAxC,EAAA,4BAAAwC,GAAA,EAIA,KAAA,GAAA9B,KAAA2B,GAAAD,GAAAI,GAKA,GAAA,eAAAH,GAAAD,GAAAI,GAAA9B,GAEA,IAAA,GAAAgC,KAAAL,GAAAD,GAAAI,GAAA9B,GAEAsB,EAAAT,MAAAC,YAAAd,EAAA2B,EAAAD,GAAAI,GAAA9B,GAAAgC,GAAA,iBAMAV,GAAAT,MAAAC,YAAAd,EAAA2B,EAAAD,GAAAI,GAAA9B,GAAA,iBASAV,GAAA,gCAAAwC,GAAA,OAQAH,GAAAD,GAAAO,YAAA,GAEA3C,EAAA,iBAAAuC,EAAA,UAAA,GAYA,GAHAP,EAAAd,UAAA0B,EAAAV,EAAA7B,EAAA8B,GAAA,GAGAH,EAAAN,aAAA,cAAA,CAEA,GAAAmB,GAAA5E,EAAA6E,cAAAd,GACAe,EAAAC,SAAA/E,EAAAgF,SAAAjB,EAAA,gBACAkB,EAAAF,SAAA/E,EAAAgF,SAAAjB,EAAA,mBACAmB,EAAAH,SAAA/E,EAAAgF,SAAAjB,EAAA,iBACAQ,EAAAR,EAAArC,aAAA,cACAyD,EAAAxF,EAAAwD,cAAA,MAgCA,IA9BAgC,EAAA3B,UAAA1D,EAAAM,eA2BA+E,EAAA7B,MAAAC,YAAA,cAAAuB,EAAA,KAAA,aACAK,EAAA7B,MAAAC,YAAA,iBAAA0B,EAAA,KAAA,aAEA,KAAAV,EAAA,CAEA,GAAAa,GAAA,IAEA,KAAA,GAAAC,KAAAC,GAAA,CAEA,GAAAC,GAAAhB,EAAAxD,QAAAuE,EAAAD,GAEA,IAAAE,EAAA,GAAA,CAGAH,EAAAE,EAAAD,EAGA,QAKA,GAAAE,EAAA,GAEA,GAAAC,GAAAC,WAAAlB,EAAAmB,MAAA,EAAAH,QAKA,IAAAC,GAAAT,SAAAR,EAIAoB,OAAAZ,SAAAS,IAEAL,EAAA7B,MAAAC,YAAA,eAAAiC,EAAAJ,EAAA,aACAD,EAAA7B,MAAAC,YAAA,gBAAAiC,EAAAJ,EAAA,cAIArD,EAAA,4BAgBA,WAAA/B,EAAAgF,SAAAjB,EAAA,aAEAA,EAAAT,MAAAC,YAAA,WAAA,WAAA,aAcAQ,EAAAT,MAAAC,YAAA,cAAAqB,EAAA,KAAA,YAWA,KATA,GAAAgB,GAAA5F,EAAA6F,iBAAA9B,EACAoB,EACAP,EACAE,EACAG,EACAC,GAEAY,EAAA,GAEAF,KAMAE,EAAA,UAAAF,EAAA,GAAA,UAAAE,CAIAX,GAAAlC,UAAA6C,EAKAX,GAAA,KAAAA,EAAAlC,WAEAc,EAAAV,YAAA8B,GAMA,QAAAnE,GAAA+E,EAAAC,GAwBAD,EAAA,IAAAA,EAAAE,OAEAF,EAAAA,EAAAG,QAAA,YAAA,SAAAC,EAAAC,GAGA,MAAAA,GAAA/E,OAAA,EAQA+E,EAAA/E,OAAA,IAAA,EAEA+E,EAAA,MAIAD,EAMAA,EAAA,OAOAJ,EAAAA,EAAAL,MAAA,EAUA,IAAA5E,GAAAiF,EAAAhF,QAAAiF,GAEAK,EAAAN,EAAAL,MAAA,EAAA5E,GAEAwF,EAAAP,EAAAL,MAAA5E,EAAAkF,EAAA3E,OAIA,OAFA0E,GAAAM,EAAA,IAAAL,EAAA,IAAAM,EAMA,QAAAvE,GAAAwE,EAAAC,GAEA,IAAA9G,EAAA+G,SAAAD,EAMA,KAAA1G,GAAAK,cAAA,KAAAoG,CAJAE,SAAAC,IAAA5G,EAAAK,cAAA,KAAAoG,GAWA,QAAA1C,GAAAK,EAAAH,EAAA3B,EAAAuE,EAAAC,GAEA,IAEA,GAAAC,GAAA,IAAAC,gBAAAC,eAAA,qBAEAF,GAAAG,KAAA,MAAA9C,EAAA,GAEA2C,EAAAI,iBAAA,mBAAA,kBAEAJ,EAAAK,mBAAA,WAEAL,EAAAM,WAAA,GAAAR,EAEA,MAAAE,EAAAO,OAEAT,EAAAE,EAAA/C,aAAA1B,EAAA2B,EAAA8C,GAIA9E,EAAA,YAAAmC,EAAA,wBAAA2C,EAAAO,QAAA,GAMAR,EAAA7C,IAMA8C,EAAAQ,OAEA,MAAAC,GAEAvF,EAAAuF,GAAA,IAMA,QAAAC,GAAAC,EAAAC,GAQA,GAAA,IAAAD,EAAAxF,OAAAX,OAEA,MAAAmG,EAqBA,IAAAE,IAAA,EAEArB,EAAAmB,EAAAtB,QAAA,kBAAA,SAAAC,EAAAC,GAIA,MAFAsB,IAAA,EAEAtB,EAAApE,OAAAX,OAAA,EAEAoG,EAAArB,GAAA,QAIAD,IAIAwB,EAAAtB,EAAAH,QAAA,2BAAA,SAAAC,EAAAC,GAEA,MAAAA,GAAApE,OAAAX,OAAA,EAEA,UAAAoG,EAAArB,GAAA,QAIAD,IAIAG,EAAAqB,EAAAzB,QAAA,qCAAA,SAAAC,EAAAC,GAEA,MAAAA,GAAApE,OAAAX,OAAA,EAEA,UAAAoG,EAAArB,GAIAD,GAIA,OAAAuB,GAAApB,EAAAmB,EAAAnB,GAKA,QAAAsB,GAAAJ,EAAAK,GAEA,IAAA,GAAAC,KAAAD,GAGAA,EAAAE,eAAAD,KAEAN,EAAAD,EAAAC,EAAAK,EAAAC,IAMA,OAAAN,GAIA,QAAAQ,GAAAR,GAEA,MAAAA,GAAAtB,QAAA,mBAAA,SAAAC,GAEA,MAAA,kBAAAA,EAAA,YAMA,QAAA8B,GAAAT,GAEA,GAAAU,GAAA5C,EAAA6C,KAAA,IAEA,OAAAX,GAAAtB,QAAA,GAAAkC,QAAA,KAAAF,EAAA,UAAAA,EAAA,MAAA,MAAA,SAAA/B,GAEA,MAAA,mBAAAA,EAAA,YAOA,QAAAkC,GAAAb,GAEA,MAAAA,GAAAtB,QAAA,sBAAA,SAAAC,GAEA,MAAA,0BAAAA,EAAA,YAMA,QAAAmC,GAAAC,GAEA,MAAAA,GAAArC,QAAA,6BAAA,SAAAC,EAAAqC,EAAAC,GAEA,GAAAC,GAAA,mBAAAF,EAAA,WASAX,GAAAc,EAAAX,EAAAC,EAAAI,EAAAO,EAEA,OAAAF,GAAAd,EAAAa,EAAAZ,GAAA,MAMA,QAAAgB,GAAArB,GAUA,MAAAA,GAAAtB,QAAA,yBAAA,SAAAC,GAEA,MAAA,uBAAAA,EAAA,YAMA,QAAA2C,GAAAC,GAEA,MAAAA,GAAA7C,QAAA,sBAAA,SAAAC,GAEA,MAAA,wBAAAA,EAAA,YAMA,QAAA6C,GAAAC,EAAAC,GAEA,MAAA,MAAAA,EAEAD,EAAA/C,QAAA,2DAAA,SAAAC,EAAAgD,EAAAJ,GA+BA,GAAAlB,IAAAc,EAAAG,EAIA,OAFAC,GAAAA,EAAAnB,EAAAmB,EAAAlB,GAAA,GAEA,yBAAAsB,EAAA,UAAAJ,EAAA,SAMAE,EAAA/C,QAAA,kDAAA,SAAAC,EAAAC,GAEA,MAAA,0BAAAA,EAAA,gBAQA,QAAAgD,GAAAH,GAMA,MAAAA,GAAA/C,QAAA,kCAAA,SAAAC,GAUA,MAAA,sBAAAA,EAAA,YAMA,QAAAkD,GAAAJ,GAMA,MAAAA,GAAA/C,QAAA,yBAAA,SAAAC,EAAAC,GAqBA,GAAAA,EAAApE,OAAAX,OAAA,EAAA,CAGA,GAAAwG,IAAAc,EAAAN,EAKA,OAAA,mCAAAT,EAAAxB,EAAAyB,GAAA,IAKA,MAAA,mCAAAzB,EAAA,MAQA,QAAAkD,GAAAL,EAAAM,EAAAnH,GAMA,GAAAoH,GAAAjJ,EAAA6B,EAAA,YAAAmH,EAAAE,cAiBA,OAAAR,GAAA/C,QAAA,GAAAkC,QAAA,IAAAoB,EAAArB,KAAA,KAAA,IAAA,MAAA,WAGA,GAAAuB,KAEA,KAAA,GAAA5B,KAAA6B,WAAA,CAEA,GAAAC,GAAAD,UAAA7B,EAEA,IAAA8B,IAAA7E,SAAA6E,EAAA,IAAA,CAWA,GAAAxD,GAAAsD,EAAA,GAGAvD,EAAAuD,EAAA,GAEAG,EAAA1D,EAAApF,QAAAqF,GAEAC,EAAAF,EAAAT,MAAA,EAAAmE,GAEAvD,EAAAH,EAAAT,MAAAmE,EAAAzD,EAAA/E,OAOA,OAAAgF,GAAA,sBAAAkD,EAAAtH,cAAA,IAAAmE,EAAA,UAAAE,EAKAsD,GAKAF,EAAAI,QAAAF,MAYA,QAAAjB,GAAAM,EAAAC,GAEA,MAAA,QAAAA,EAgBAD,EAAA/C,QAAA,kFAAA,SAAAC,GAEA,MAAA,qBAAAA,EAAA,YAOA8C,EAAA/C,QAAA,uBAAA,SAAAC,GAEA,MAAA,qBAAAA,EAAA,YAQA,QAAA4D,GAAAd,EAAAC,GAEA,MAAA,WAAAA,EAaAD,EAAA/C,QAAA,kBAAA,SAAAC,GAEA,MAAA,sBAAAA,EAAA,YAIA,UAAA+C,EAGAD,EAAA/C,QAAA,oBAAA,SAAAC,GAEA,MAAA,sBAAAA,EAAA,YAOA8C,EAAA/C,QAAA,8CAAA,SAAAC,GAEA,MAAA,sBAAAA,EAAA,YAQA,QAAA6D,GAAAf,EAAAC,GAGA,GAAA,QAAAA,EAEA,MAAAD,GAAA/C,QAAA,mDAAA,SAAAC,EAAAC,EAAA6D,GAEA,MAAA,uBAAA7D,EAAA,UAAA6D,GAIA,IAAA,eAAAf,EAAA,CAEA,GAAAgB,GAAA,aACAC,EAAA,GAAA/B,QAAAgC,EAAAnE,OAAAiE,EAAAjE,OAAA,KAEA,OAAAgD,GAAA/C,QAAAiE,EAAA,SAAAhE,GAGA,MAAA,OAAAA,GAAA,OAAAA,EAEAA,EAIA,uBAAAA,EAAA,YAMA,MAAA8C,GAKA,QAAAoB,GAAApB,EAAAC,GAGA,MAAA,QAAAA,EAGAD,EAAA/C,QAAA,wFAAA,SAAAC,GAEA,MAAA,uBAAAA,EAAA,YAIA,eAAA+C,EAEAD,EAAA/C,QAAAkE,EAAA,SAAAjE,GAGA,MAAA,OAAAA,GAAA,OAAAA,EAEAA,EAIA,uBAAAA,EAAA,YAMA8C,EAIA,QAAAL,GAAAK,GAOA,MAAAA,GAAA/C,QAAA,sBAAA,SAAAC,GAEA,MAAA,qBAAAA,EAAA,YAMA,QAAAmE,GAAArB,EAAA/E,GAEA,GAAAqG,GAAA,IAUA,OAAAtB,GAAA/C,QAAA,mDAAA,SAAAC,EAAAqE,EAAAC,EAAAC,GAiCA,MAVA,MAAAF,GAAA,QAAAC,EAAAzI,OAAAC,gBAEAsI,EAAAE,EAAAvE,QAAA,OAAA,IAGAnE,EAAA,mFAAAmC,EAAAA,EAAA,eAAA,cAAA,4CAKA,OACAsG,GACAD,EAAAA,EAAAE,IACAC,EAAArJ,OAAA,EAGAsD,EAAA+F,EAAA,MAAA,MACAA,GACAF,EACA,SAMA,QAAAG,GAAA1B,GAEA,MAAAA,GAAA/C,QAAA,iEAAA,SAAAC,EAAA4C,EAAA6B,GAOA,MAJA7B,KACAA,EAAA,IAGA,YAAAA,EAAA,OAAApE,EAAAiG,EAAA,aAAA,MAAA,mBAMA,QAAAC,GAAA5B,GAOA,IALA,GAAA6B,IAAA,EACAC,EAAA9B,EACA+B,EAAA,GACAC,EAAA,KAEAH,GAGAA,GAAA,EAEAE,GAAAD,EAAA7E,QAAA,2FAAA,SAAAC,EAAAE,EAAA6E,EAAAR,EAAAS,EAAAlB,GAsCA,GA/BAA,EAAAjI,OAAAX,OAAA,IAGAyJ,GAAA,GAIAC,EAAAd,EAsBAgB,EAAAC,EAAA/E,MAAA,kCAEA,CAEA,GAAAiF,GAAAH,EAAA,IAAAA,EAAA,GAAAjJ,OAAAC,aAEA,IAAAmJ,GAAAA,EAAA/J,OAAA,GAEA,eAAA+J,GAAA,oBAAAA,GAAA,WAAAA,EAMA,MAAA/E,GAAA6E,EAAAR,EAAAS,EAkBA,MAAA9E,GACA6E,GACAR,EAAA1I,OAAAX,OAAA,EACAsD,EAAA+F,EAAA,aAAA,MACAA,GAAAS,GAMA,OAAAH,GAIA,QAAAK,GAAAjF,EAAA8C,EAAAoC,EAAAlJ,EAAA8B,GAGA,GAAAmC,GAAA,GACAC,EAAA,GAEAgF,EAAAA,EAAAA,EAAArJ,cAAAqJ,CAwBA,QAtBA,WAAAA,GAEAjF,EAAA,GACAC,EAAA,SAEA,cAAAgF,GAEAjF,EAAA,UACAC,EAAA,SAEA,UAAAgF,GAEAjF,EAAA,UACAC,EAAA,KAIAD,EAAA,GACAC,EAAA,IAIA4C,GAEA,IAAA,UAEA,MAAA7C,GAAAuC,EAAAxC,GAAAE,CAIA,KAAA,mBAEA,MAAAD,GAAAgD,EAAAjD,GAAAE,CAIA,KAAA,UAEA,MAAAD,GAAA+C,EAAAhD,GAAAE,CAIA,KAAA,mBAEA,MAAAD,GAAAwE,EAAAzE,GAAAE,CAIA,KAAA,YAEA,MAAAD,GAAAiE,EAAAlE,EAAAlC,GAAAoC,CAIA,KAAA,mBAEA,MAAAD,GAAAsE,EAAAvE,GAAAE,CAIA,KAAA,kBAEA,MAAAD,GAAAiC,EAAAlC,GAAAE,CAIA,KAAA,sBAEA,MAAAD,GAAAwC,EAAAzC,GAAAE,CAIA,SAOA,MAAA4C,GAAAnI,QAAA,YAAA,GAKAsF,EAAAiD,EAAAlD,EAAA8C,EAAAxD,MAAA,IAAAtD,GAAAkE,EAEA4C,EAAAnI,QAAA,YAAA,GAKAsF,EAAA0D,EAAA3D,EAAA8C,EAAAxD,MAAA,IAAAY,EAEA4C,EAAAnI,QAAA,UAAA,GAKAsF,EAAA2C,EAAA5C,EAAA8C,EAAAqC,OAAA,EAAA,IAAAjF,EAEA4C,EAAAnI,QAAA,WAAA,GAKAsF,EAAAsC,EAAAvC,EAAA8C,EAAAxD,MAAA,IAAAY,EAEA4C,EAAAnI,QAAA,aAAA,GAMAsF,EAAAgE,EAAAjE,EAAA8C,EAAAxD,MAAA,EAAAwD,EAAAnI,QAAA,eAAAuF,EAEA4C,EAAAnI,QAAA,aAAA,GAKAsF,EAAA2D,EAAA5D,EAAA8C,EAAAxD,MAAA,EAAAwD,EAAAnI,QAAA,eAAAuF,EAIAD,EAAA,mBAAAD,EAAA,UAAAE,GAQA,QAAAkF,GAAAvH,EAAAiF,EAAA9G,EAAA8B,GAGA,GAAAwD,IAAA,EAUArB,EAAApC,EAAAiC,QAAA,kBAAA,SAAAC,EAAAC,GAoBA,MAjBAsB,IAAA,EAiBAtB,EAAApE,OAAAX,OAAA,EAEAgK,EAAAjF,EAAA8C,EAAA,SAAA9G,EAAA8B,GAKAiC,IAIAwB,EAAAtB,EAAAH,QAAA,2BAAA,SAAAC,EAAAC,GAMA,MAAAA,GAAApE,OAAAX,OAAA,EAEAgK,EAAAjF,EAAA8C,EAAA,YAAA9G,EAAA8B,GAKAiC,IAKAG,EAAAqB,EAAAzB,QAAA,qCAAA,SAAAC,EAAAC,GAEA,MAAAA,GAAApE,OAAAX,OAAA,EAEAgK,EAAAjF,EAAA8C,EAAA,QAAA9G,EAAA8B,GAKAiC,GAsBA,OAAAuB,GAAApB,EAAA+E,EAAA/E,EAAA4C,EAAA,KAAA9G,EAAA8B,GAGA,QAAAS,GAAAV,EAAA7B,EAAA8B,EAAAuH,GAwGAxH,EAAAA,EAAAiC,QAAA,KAAA,QAAAA,QAAA,KAAA,QAGAuF,IAEAxH,EAAAA,EAAAiC,QAAA,WAAA,IAAAA,QAAA,WAAA,IAIA,IAAAwF,KAEA,QAAAtJ,GAEA,IAAA,SAEAsJ,EAAAC,KAAA,kBACAD,EAAAC,KAAA,qBACAD,EAAAC,KAAA,qBACAD,EAAAC,KAAA,UAEA,MAEA,KAAA,MAEAD,EAAAC,KAAA,iBACAD,EAAAC,KAAA,kBAKAD,EAAAC,KAAA,cACAD,EAAAC,KAAA,cACAD,EAAAC,KAAA,cACAD,EAAAC,KAAA,cAOAD,EAAAC,KAAA,gBACAD,EAAAC,KAAA,gBASAD,EAAAC,KAAA,UAEA,MAEA,KAAA,aAEAD,EAAAC,KAAA,iBACAD,EAAAC,KAAA,oBACAD,EAAAC,KAAA,mBACAD,EAAAC,KAAA,sBAEA,MAEA,KAAA,aAEAD,EAAAC,KAAA,iBACAD,EAAAC,KAAA,kBACAD,EAAAC,KAAA,kBACAD,EAAAC,KAAA,cACAD,EAAAC,KAAA,cACAD,EAAAC,KAAA,cASAD,EAAAC,KAAA,uBACAD,EAAAC,KAAA,uBAUAD,EAAAC,KAAA,UAEA,MAEA,KAAA,IAEAD,EAAAC,KAAA,oBACAD,EAAAC,KAAA,aACAD,EAAAC,KAAA,oBAaAD,EAAAC,KAAA,kBACAD,EAAAC,KAAA,qBACAD,EAAAC,KAAA,qBACAD,EAAAC,KAAA,WAOAD,EAAAC,KAAA,OAEA,KAAA,GAAA7D,KAAA4D,GAEAzH,EAAAuH,EAAAvH,EAAAyH,EAAA5D,GAAA1F,EAAA8B,EAIA,OAAAD,GAx1FA,GAAAnE,IAEA8L,yBAEAC,cAAA,OAAAC,WAAA,YACAA,WAAA,UAAAC,MAAA,SACAF,cAAA,OAAAC,WAAA,6BACAA,WAAA,cAAAC,MAAA,SAGAC,eAAA,qCACAC,mBAAA,2BACAF,MAAA,2BACAG,QAAA,QAKAF,eAAA,iBACAC,mBAAA,OACAF,MAAA,oBACAI,QAAA,GACAD,QAAA,QAMAE,kBAAA,KAEAC,cAAA,yBAEAjM,eAAA,KAEAD,cAAA,mBAEAmC,eAAA,MAAA,aAAA,SAAA,aAAA,KAGAE,wBAEAE,SAAA,UAGA3C,MAAA,KAKAY,aAoCA2L,oBAEAC,MAAA,UACAC,KAAA,SACAC,IAAA,QACAC,UAAA,2BACAC,KAAA,YAIAC,aAEAC,aAAA,iBACAC,GAAA,SACAP,MAAA,eACAQ,MAAA,eACAC,KAAA,SACAN,UAAA,sBACAO,IAAA,WAKArM,cAEAsM,KAAA,YACAC,WAAA,kBACAC,QAAA,UACAC,KAAA,UACAC,MAAA,WACAC,OAAA,SACAC,MAAA,QACAC,SAAA,gBACAC,KAAA,UACAC,GAAA,WASA7N,GAAAM,eAAAN,EAAAK,cAAA,SAEAL,EAAAsM,oBAKAwB,cAAA9N,EAAA8L,uBAAA,GACAiC,mBAAA/N,EAAA8L,uBAAA,GAGAkC,mBAAAhO,EAAA8L,uBAAA,GACAmC,wBAAAjO,EAAA8L,uBAAA,GAGAoC,oCAAAlO,EAAA8L,uBAAA,GACAqC,yCAAAnO,EAAA8L,uBAAA,GAEAsC,oCAAApO,EAAA8L,uBAAA,GACAuC,yCAAArO,EAAA8L,uBAAA,GAEAwC,oCAAAtO,EAAA8L,uBAAA,GACAyC,yCAAAvO,EAAA8L,uBAAA,KAKAgC,cAAA9N,EAAA8L,uBAAA,GACAiC,mBAAA/N,EAAA8L,uBAAA,GAGAkC,mBAAAhO,EAAA8L,uBAAA,GACAmC,wBAAAjO,EAAA8L,uBAAA,GAGAoC,oCAAAlO,EAAA8L,uBAAA,GACAqC,yCAAAnO,EAAA8L,uBAAA,GAEAsC,oCAAApO,EAAA8L,uBAAA,GACAuC,yCAAArO,EAAA8L,uBAAA,GAEAwC,oCAAAtO,EAAA8L,uBAAA,GACAyC,yCAAAvO,EAAA8L,uBAAA,IAoBA,IAAAxH,IAKAkK,QAEA5J,UAAA,EACAF,OAAA,EAEA+J,MAGAC,aAAA,OACAC,aAAA,SAGAC,YAAA,aAEAC,eACA,WACA,gBACA,YACA,eAIAC,gBAAA,eAMAC,UAEAnK,UAAA,EACAF,OAAA,EAEAsK,qBAAA,aACAC,kBAAA,aACAC,aAAA,eAiBAlN,GAEAmN,OAEAhD,mBAAA,UAEAiD,YAAA,UACAC,cAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,eAAA,UACAC,cAAA,UACAC,iBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,cAAA,UACAC,YAAA,UACAC,WAAA,UACAC,YAAA,UACAC,mBAAA,UACAC,cAAA,UACAC,eAAA,UAEAC,oBAAAtQ,EAAAsM,kBAAA,GAEAtG,MAAAhG,EAAA8L,uBAAA,IAIAyE,QAEApE,mBAAA,UAEAiD,YAAA,UACAC,cAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,eAAA,UACAC,cAAA,UACAC,iBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,cAAA,UACAC,YAAA,UACAC,WAAA,UACAC,YAAA,UACAC,mBAAA,UACAC,cAAA,UACAC,eAAA,UAEAC,oBAAAtQ,EAAAsM,kBAAA,GAEAtG,MAAAhG,EAAA8L,uBAAA,IAIA0E,OAEArE,mBAAA,UAEAiD,YAAA,UACAC,cAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,eAAA,UACAC,cAAA,UACAC,iBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,cAAA,UACAC,YAAA,UACAC,WAAA,UACAC,YAAA,UACAC,mBAAA,UACAC,cAAA,UACAC,eAAA,UAEAC,oBAAAtQ,EAAAsM,kBAAA,GAEAtG,MAAAhG,EAAA8L,uBAAA,IAIA2E,OAEAtE,mBAAA,UAEAiD,YAAA,UACAC,cAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,eAAA,UACAC,cAAA,UACAC,iBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,cAAA,UACAC,YAAA,UACAC,WAAA,UACAC,YAAA,UACAC,mBAAA,UACAC,cAAA,UACAC,eAAA,UAEAC,oBAAAtQ,EAAAsM,kBAAA,GAEAtG,MAAAhG,EAAA8L,uBAAA,IAIA4E,QAEAvE,mBAAA,UAEAiD,YAAA,UACAC,cAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,eAAA,UACAC,cAAA,UACAC,iBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,cAAA,UACAC,YAAA,UACAC,WAAA,UACAC,YAAA,UACAC,mBAAA,UACAC,cAAA,UACAC,eAAA,UAEAC,oBAAAtQ,EAAAsM,kBAAA,GAEAtG,MAAAhG,EAAA8L,uBAAA,IAIA6E,OAEAxE,mBAAA,UAEAiD,YAAA,UACAC,cAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,eAAA,UACAC,cAAA,UACAC,iBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,cAAA,UACAC,YAAA,UACAC,WAAA,UACAC,YAAA,UACAC,mBAAA,UACAC,cAAA,UACAC,eAAA,UAEAC,oBAAAtQ,EAAAsM,kBAAA,GAEAtG,MAAAhG,EAAA8L,uBAAA,IAIA8E,OAEAzE,mBAAA,UAEAiD,YAAA,UACAC,cAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,kBAAA,UACAC,eAAA,UACAC,cAAA,UACAC,iBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,gBAAA,UACAC,cAAA,UACAC,YAAA,UACAC,WAAA,UACAC,YAAA,UACAC,mBAAA,UACAC,cAAA,UACAC,eAAA,UAEAC,oBAAAtQ,EAAAsM,kBAAA,GAEAtG,MAAAhG,EAAA8L,uBAAA,KAMA5L,GAEA2Q,YAAA,SAAAC,EAAA1H,EAAA2H,GAEAD,EAAAE,iBAAA5H,EAAA2H,GAAA,IAIAxQ,eAAA,SAAAuQ,EAAA1H,EAAA2H,GAEAD,EAAAG,oBAAA7H,EAAA2H,GAAA,IAIAG,iBAAA,SAAAjN,EAAAoB,EAAA8L,GAEA,GAAAC,GAAAvR,EAAAwR,eAAAF,GACAG,EAAAzR,EAAAwD,cAAA,QACAkO,EAAA,IAaA,OAXAD,GAAA/N,YAAA6N,GAEA/L,EAAA9B,YAAA+N,GAEArN,EAAAV,YAAA8B,GAGAkM,EAAAlM,EAAAmM,YAEAvN,EAAAwN,YAAApM,GAEAkM,GAOAxM,cAAA,SAAAd,GAEA,GAAAyN,GAAA7R,EAAAwD,cAAA,OACAyB,EAAA,IAYA,OAVA4M,GAAAvO,UAAA,IACAuO,EAAAlO,MAAAC,YAAA,UAAA,IAAA,aACAiO,EAAAlO,MAAAC,YAAA,SAAA,OAAA,aAEAQ,EAAAV,YAAAmO,GAEA5M,EAAA4M,EAAAC,aAEA1N,EAAAwN,YAAAC,GAEA5M,GAKAP,WAAA,SAAAqN,GAEA,MAAAA,GAAAxL,QAAA,SAAA,SAAAC,GAEA,MAAA,IAAAA,EAAAlE,iBAOA0P,SAAA,SAAAD,GAEA,MAAAA,GAAAxL,QAAA,UAAA,SAAAC,EAAAyL,GAEA,MAAAA,GAAAnI,iBAMAzE,SAAA,SAAAjB,EAAA8N,GAEA,GAAAC,GAAA9R,EAAA2R,SAAAE,GACAE,EAAA,IAYA,OARAA,GAFApS,EAAAqS,aAAArS,EAAAqS,YAAAC,iBAEAtS,EAAAqS,YAAAC,iBAAAlO,EAAA,MAAAmO,iBAAAL,GAIA9N,EAAAT,MAAAwO,IAQAK,UAAA,SAAApO,EAAAa,EAAAE,EAAAG,GAgDAlB,EAAAT,MAAAC,YAAA,cAAA,IAAA,aACAQ,EAAAT,MAAAC,YAAA,iBAAA,IAAA,YAEA,IAAA6O,GAAArO,EAAAsO,aACAC,EAAAF,EAAAxN,CAKA,OAHAb,GAAAT,MAAAC,YAAA,cAAAuB,EAAA,KAAA,aACAf,EAAAT,MAAAC,YAAA,iBAAA0B,EAAA,KAAA,aAEAmN,EAAAE,GAIAzM,iBAAA,SAAA9B,EAAAoB,EAAAP,EAAAE,EAAAG,EAAAC,GA2DA,GAAAqN,GAAAvS,EAAAmS,UAAApO,EAAAa,EAAAE,EAAAG,GACAW,EAAA2M,EAAA3N,EACA4N,EAAAxS,EAAAgR,iBAAAjN,EAAAoB,EAAAS,EAEA7B,GAAAT,MAAAC,YAAA,eAAA2B,EAAAsN,EAAA,KAAA,YAEA,IAAAC,GAAAzS,EAAAmS,UAAApO,EAAAa,EAAAE,EAAAG,GACAyN,EAAAD,EAAA7N,EACA+N,EAAA3S,EAAAgR,iBAAAjN,EAAAoB,EAAAuN,EAEA,OAAAF,KAAAG,EAEAD,GAIA3O,EAAAT,MAAAC,YAAA,eAAA2B,EAAAyN,EAAA,KAAA,aAEA3S,EAAA6F,iBAAA9B,EAAAoB,EAAAP,EAAAE,EAAAG,EAAAC,KAMA0N,SAAA,SAAAC,GAEA,MAAA/S,GAAAuM,cAAA1J,KAAAkQ,IAIAnS,WAAA,SAAAoS,GAEAA,EAAAC,KAAA,SAAAC,EAAAC,GAEA,MAAAA,GAAA5R,OAAA2R,EAAA3R,UAMAnB,WAAA,SAAAH,EAAA8C,EAAA0F,EAAAzH,GASA,GAPAA,IAAAlB,IAGAkB,EAAAf,EAAAwI,MAAAxI,EAAAwI,MAAAlH,OAAAtB,EAAAmT,SAAA7R,QAIA,YAAAtB,GAgBA,IAEAA,EAAAoT,WAAAtQ,EAAA,IAAA0F,EAAA,IAAAzH,GAEA,MAAAwG,MAMAhG,SAAA,SAAAyC,EAAAqP,GAEA,GAAAC,GAAA,GAAAjL,QAAA,UAAAgL,EAAA,UAEA,OAAAC,GAAA1Q,KAAAoB,EAAAP,YAIAvD,SAAA,WAGA,GAAAqD,GAAA3D,EAAAwD,cAAA,QAiBA,OATAG,GAAAD,YAAA1D,EAAAwR,eAAA,KAMAxR,EAAAwB,qBAAA,QAAA,GAAAkC,YAAAC,GAGAA,EAAAvD,QAcAQ,GAEA+L,oBAGAgH,IAAA,OAAA,YAAA,UAAA,QAAA,OAAA,OAAA,OAAA,QAAA,WAAA,WAAA,UAAA,SAAA,SAAA,OAAA,OAAA,UAAA,QAAA,UAAA,QAAA,OAAA,aAAA,aAAA,MAAA,OAAA,SAAA,MAAA,OAAA,UAAA,UAAA,YAAA,SAAA,SAAA,QAAA,SAAA,QAAA,eAAA,OAAA,QAAA,SAAA,YAAA,OAAA,SAAA,OAAA,WAAA,OAAA,SAGAC,IAAA,KAAA,QAAA,QAAA,WAAA,KAAA,OAAA,QAAA,MAAA,WAAA,KAAA,KAAA,YAAA,MAAA,MAAA,SAAA,MAAA,SAUAC,IAAA,SAAA,WAIA5G,aAGA0G,IAAA,kBAAA,MAAA,QAAA,KAAA,QAAA,WAAA,OAAA,QAAA,QAAA,WAAA,UAAA,UAAA,MAAA,OAAA,QAAA,aAAA,SAAA,aAAA,QAAA,YAAA,WAAA,OAAA,OAAA,UAAA,SAAA,OAAA,UAAA,eAAA,aAAA,YAAA,YAAA,QAAA,OAAA,YAAA,MAAA,KAAA,QAAA,UAAA,YAAA,SAAA,UAAA,eAAA,SAAA,SAAA,QAAA,MAAA,MAAA,YAGAC,IAAA,aAAA,WAAA,QAAA,QAAA,KAAA,OAAA,SAAA,QAAA,MAAA,UAAA,WAAA,MAAA,QAAA,QAAA,MAAA,QAAA,SAAA,MAGAC,IAAA,YAAA,UAAA,WAAA,eAAA,WAAA,aAAA,gBAAA,eAwBApJ,EAAA,8nSAEA9E,GAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,OAAA,OAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAMAtF,GAAAU,WAAA4E,GAwgEAtF,EAAA2Q,YAAAjR,EAAA,OAAAG,IAEAH,OAAAC","file":"build.min.js","sourcesContent":["(function(window, document, undefined){\r\n\r\n    'use strict';\r\n\r\n   /* Must appear at the top as some objects/functions may depend upon 1 or more properties\r\n    * for example colorSchemes.schemeName.selectorUnderScheme obj require valuables.repetitiveRulesObjects.\r\n    *\r\n    * About the repetitive arrays of objects below(repetitiveRulesObjects, repetitiveObjects), they are used\r\n    * so I won't have to rewrite them again and again, but the \"standard\" is that WHEREVER a repetitive is used,\r\n    * a user defined can be used, so you may replace them any time with your own custom objects.\r\n    * */\r\n    var valuables = {\r\n\r\n        repetitiveRulesObjects: [   \r\n\r\n            { 'text-shadow': 'none', 'background': '#b3d4fc' }, // colorSchemes selection, whites related.\r\n            { 'background': '#282b31', 'color': '#fff' }, // colorSchemes selection, whites related.\r\n            { 'text-shadow': 'none', 'background': 'rgba(204, 204, 204, 0.2)' }, // colorSchemes selection, blacks related.\r\n            { 'background': 'transparent', 'color': '#fff' }, // colorSchemes selection, blacks related.\r\n            { // colorSchemes lines, blacks related.\r\n\r\n                'border-right': '1px solid rgba(204, 204, 204, 0.1)',\r\n                'background-color': 'rgba(204, 204, 204, 0.1)',\r\n                'color': 'rgba(255, 255, 255, 0.9)',\r\n                'padding': '6px'\r\n\r\n            },\r\n            { // colorSchemes lines, whites related.\r\n\r\n                'border-right': '1px solid #ccc',\r\n                'background-color': '#fff',\r\n                'color': 'rgb(88, 110, 117)',\r\n                'opacity': 0.3,\r\n                'padding': '6px'\r\n\r\n            }\r\n\r\n        ],\r\n\r\n        repetitiveObjects: null, // Will be set outside of this object as it depends upon valuables.repetitiveRulesObjects\r\n\r\n        nativePattern: /^[^{]+\\{\\s*\\[native \\w/,\r\n\r\n        linesClassName: null, //Will be set outside of this object as it depends upon valuables.codeClassName\r\n\r\n        codeClassName: 'code-highlighter',\r\n\r\n        validSyntaxes: ['php', 'javascript', 'markup', 'stylesheet', '*'],\r\n\r\n        // Color schemes names that their rules was already inserted into the page.\r\n        insertedColorSchemes: {},\r\n\r\n        dataPatt: /^data\\-/,\r\n\r\n        // Single initiation is required.\r\n        sheet: null,\r\n\r\n        /* withMeaning is used to change specific Keywords pattern, for example, the or php operator\r\n         * must have spaces before and after(' or '), each change is explained.\r\n         * */\r\n        withMeaning: {\r\n\r\n           /* A short notice about the below objects, if you decide you don't need them, don't leave them empty,\r\n            * they are better be removed than empty, if empty then there will iteration over all the keywords\r\n            * related to the below object, even if empty so for example if phpKeywords is empty but existed, even than\r\n            * all php keywords will be iterated.\r\n            *\r\n            * Rules appear in all the javascript/php/multi keywords either deny formation or restrict formation.\r\n            * \r\n            * To understand it, the class rule from the multi keywords add a restriction that determine that there must be a space\r\n            * after the class keyword.\r\n            *\r\n            * The function keyword from multi keywords was originaly placed at phpKeywords object\r\n            * and added a deny formation where after the function keyword there must be __\r\n            * if posible always try restrict formation because with deny formation you may deny formation\r\n            * for a single syntax, after I replaced the function keyword from deny to restrict I was able to move it from\r\n            * the phpKeywords object to the multiMeaning object.\r\n            *\r\n            * IMPORTANT NOTICE:\r\n            * There are restrictions that restrict VALID format, for example 'return': /return(\\s|\\;)/ inside\r\n            * multiMeaning, return'string' is a valid combination, yet if I remove it I tend to think\r\n            * that there will be more chance to \"run into\" a none keyword(comments, strings, etc) 'return'\r\n            * than \"run into\" a none formatted code return'string', below when I describe the fix patterns\r\n            * I say things like can't be, etc, some things are code doable be but what I really mean is that\r\n            * the wrong syntax can't be highlighter.\r\n            *\r\n            * The system is helping you behind the scenes with writing the below regexp, the problem is that\r\n            * the getKeywords system require '(\\\\=\\\\s)array' to become '(?:\\\\=\\\\s)(array)', the fixFixer\r\n            * function fixes your patterns that should fix the keyword matching, so now instead of writing\r\n            * '(?:\\\\=\\\\s)(array)' manually you write '(\\\\=\\\\s)array' and fixFixer will convert it into\r\n            * '(?:\\\\=\\\\s)(array)' for getKeywords system.\r\n            *\r\n            * Only IE < 9 have a problem with object keys that are javascript special keywords like(in or function),\r\n            * I don't support IE < 9 so I don't have to wrap the keys, but for any case some other browser I haven't\r\n            * tested with have the same propblem I wrap the keys with single quotation marks('key').\r\n            * */\r\n            javascriptKeywords: {\r\n\r\n                'array': /\\sarray/, // There must be space because there is new before the array keyword.\r\n                'in': /\\sin\\s/,\r\n                'let': /let\\s/,\r\n                'default': /(\\;|\\s)default(\\s*\\:|\\s)/, // The 1st(at the end) alternative is for default inside switch, the 2st(at the end) alternative is for ecmascript 6 module system\r\n                'from': /\\sfrom\\s/ // For ECMAScript 6 module system { $ as jQuery } from 'jquery', can't be }from'\r\n            \r\n            },\r\n\r\n            phpKeywords: {\r\n                \r\n                'implements': /\\simplements\\s/, // Must be something like: class Template implements iTemplate\r\n                'or': /\\sor\\s/, // Can't be called: trueorfalse, must be true or false\r\n                'array': /(\\=\\s?)array/, // There may be space but there must be = sign.\r\n                'clone': /(\\=\\s?)clone/, // There may be space but there must be = sign.\r\n                'echo': /echo\\s/,\r\n                'default': /(\\;|\\s)default\\s*\\:/,\r\n                'and': /\\sand\\s/\r\n            \r\n            },\r\n\r\n            // The rules in here must be legitimate for all supported programming languages.\r\n            multiMeaning: {\r\n\r\n                'eval': /eval\\s*\\(/,\r\n                'function': /function(\\s|\\()/, // For anonymous functions and named functions.\r\n                'class': /class\\s/, // There must be space before the class name\r\n                'if': /if\\s*\\(/,\r\n                'for': /for\\s*\\(/,\r\n                'case': /case\\s/,\r\n                'var': /var\\s/, // Depricated by php.\r\n                'return': /return(\\s|\\;)/,\r\n                'do': /do\\s*\\{/,\r\n                'as': /\\sas\\s/ // Can't be called $arrayas$key must be $array as $key, for ECMAScript 6 module system $ as jQuery, can't be $asjQuery\r\n            \r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    // The following valuables.x must be set outside of valuables as they use valuables properties/methods.\r\n    valuables.linesClassName = valuables.codeClassName + '-lines';\r\n\r\n    valuables.repetitiveObjects = [\r\n\r\n        { // colorSchemes selection, blacks related.\r\n\r\n            // valuables.codeClassName selection\r\n            '::selection': valuables.repetitiveRulesObjects[2],\r\n            '::-moz-selection': valuables.repetitiveRulesObjects[2],\r\n\r\n            // General span selection\r\n            ' span::selection': valuables.repetitiveRulesObjects[2],\r\n            ' span::-moz-selection': valuables.repetitiveRulesObjects[2],\r\n\r\n            // Keywords span selection\r\n            ' span[data-keyword-fc]::selection': valuables.repetitiveRulesObjects[3],\r\n            ' span[data-keyword-fc]::-moz-selection': valuables.repetitiveRulesObjects[3],\r\n\r\n            ' span[data-keyword-sc]::selection': valuables.repetitiveRulesObjects[3],\r\n            ' span[data-keyword-sc]::-moz-selection': valuables.repetitiveRulesObjects[3],\r\n\r\n            ' span[data-keyword-tc]::selection': valuables.repetitiveRulesObjects[3],\r\n            ' span[data-keyword-tc]::-moz-selection': valuables.repetitiveRulesObjects[3]\r\n\r\n        }, { // colorSchemes selection, whites related.\r\n\r\n            // valuables.codeClassName selection\r\n            '::selection': valuables.repetitiveRulesObjects[0],\r\n            '::-moz-selection': valuables.repetitiveRulesObjects[0],\r\n\r\n            // General span selection\r\n            ' span::selection': valuables.repetitiveRulesObjects[0],\r\n            ' span::-moz-selection': valuables.repetitiveRulesObjects[0],\r\n\r\n            // Keywords span selection\r\n            ' span[data-keyword-fc]::selection': valuables.repetitiveRulesObjects[1],\r\n            ' span[data-keyword-fc]::-moz-selection': valuables.repetitiveRulesObjects[1],\r\n\r\n            ' span[data-keyword-sc]::selection': valuables.repetitiveRulesObjects[1],\r\n            ' span[data-keyword-sc]::-moz-selection': valuables.repetitiveRulesObjects[1],\r\n\r\n            ' span[data-keyword-tc]::selection': valuables.repetitiveRulesObjects[1],\r\n            ' span[data-keyword-tc]::-moz-selection': valuables.repetitiveRulesObjects[1]\r\n\r\n        }\r\n\r\n    ];\r\n\r\n   /* The is a small standard about object like codeElementStyles.scroll, codeElementStyles.absWidth, etc.\r\n    *\r\n    * Each of the objects must implement required and empty properties, the required property indicates\r\n    * whether the attribute related to this object must be implemented, the empty property indicates\r\n    * whether or not that propertie can be empty, the user may enter a value but the value will be ignored.\r\n    *\r\n    * Due to the fact that I can't use multiple object properties with the same name to achive:\r\n    *\r\n    * 'white-space': 'pre-wrap',\r\n    * 'white-space': '-moz-pre-wrap', and so on...\r\n    *\r\n    * I'm using an array to include few value under a specific rule, the mechanism apply the rules will\r\n    * check the value, if it's an array it will iterate it.\r\n    * */\r\n    var codeElementStyles = {\r\n\r\n       /* For all scroll options I must override both overflow-x and overflow-y due to the default\r\n        * overflow-x and overflow-y set to auto.\r\n        * */\r\n        scroll: {\r\n\r\n            required: false,\r\n            empty: false,\r\n\r\n            down: {\r\n\r\n                // There is no need for that rule since I break the text but just in case.\r\n                'overflow-y': 'auto',\r\n                'overflow-x': 'hidden',\r\n                \r\n                // To ensure pre formatted text will break.\r\n                'word-wrap': 'break-word', // IE 5.5+\r\n\r\n                'white-space': [\r\n                    'pre-wrap', // css-3\r\n                    '-moz-pre-wrap', // Mozilla, since 1999\r\n                    '-pre-wrap', // Opera 4-6\r\n                    '-o-pre-wrap', // Opera 7\r\n                ],\r\n\r\n                // Supported by stable builds of Google and Opera, check out https://developer.mozilla.org/en-US/docs/Web/CSS/word-wrap for more information\r\n                'overflow-wrap': 'break-word'          \r\n\r\n            }\r\n\r\n        },\r\n\r\n        absWidth: {\r\n\r\n            required: false,\r\n            empty: true,\r\n\r\n            '-webkit-box-sizing': 'border-box', // Safari/Chrome, other WebKit\r\n            '-moz-box-sizing': 'border-box', // Firefox, other Gecko\r\n            'box-sizing': 'border-box' // Opera/IE 8+\r\n\r\n        }\r\n\r\n    };\r\n\r\n   \r\n   /* About selectorUnderScheme, under valuables.codeClassName element there are many elements, the\r\n    * selectorUnderScheme help with the option to add some css rules per selector under a specific\r\n    * color scheme, there can be only 1 selector per selectorUnderScheme property, each selector\r\n    * will be appended to '.' + valuables.codeClassName + '.' + colorScheme[0](color scheme name),\r\n    * and for that you can't use several selectors within single property, if the color scheme is\r\n    * summer for example and the selectorUnderScheme property name(selector) is: ' span', then\r\n    * the final selector will be: valuables.codeClassName.summer span {}, so you won't have to repeat\r\n    * the same rules object you assign to a specific selector, you have valuables.repetitiveRulesObjects\r\n    * to hold a repetitive objects that you assign to multiple selectors.\r\n    * */\r\n    var colorSchemes = {\r\n\r\n        apple: { // White background, Apple\r\n\r\n            'background-color': '#f5f7fa',\r\n\r\n            'data-rest': '#586e75',\r\n            'data-string': '#2aa198',\r\n            'data-keyword-fc': '#cb4b16',\r\n            'data-keyword-sc': '#859900',\r\n            'data-keyword-tc': '#dc322f',\r\n            'data-comment': '#586e75',\r\n            'data-markup': '#268bd2',\r\n            'data-attribute': '#b58900',\r\n            'data-selector': '#cb4b16',\r\n            'data-variable': '#b58900',\r\n            'data-function': '#268bd2',\r\n            'data-number': '#2aa198',\r\n            'data-rule': '#268bd2',\r\n            'data-hex': '#2aa198',\r\n            'data-unit': '#cb4b16',\r\n            'data-named-value': '#b58900',\r\n            'data-import': '#268bd2',\r\n            'data-doctype': '#586e75',\r\n\r\n            selectorUnderScheme: valuables.repetitiveObjects[1],\r\n\r\n            lines: valuables.repetitiveRulesObjects[5]\r\n\r\n        },\r\n\r\n        orange: { // White background, Orange\r\n\r\n            'background-color': '#ffffff',\r\n\r\n            'data-rest': '#333333',\r\n            'data-string': '#56982D',\r\n            'data-keyword-fc': '#56982D',\r\n            'data-keyword-sc': '#859900',\r\n            'data-keyword-tc': '#56982D',\r\n            'data-comment': '#586e75',\r\n            'data-markup': '#006F78',\r\n            'data-attribute': '#3BA05E',\r\n            'data-selector': '#3BA05E',\r\n            'data-variable': '#006F78',\r\n            'data-function': '#3BA05E',\r\n            'data-number': '#56982D',\r\n            'data-rule': '#006F78',\r\n            'data-hex': '#56982D',\r\n            'data-unit': '#3BA05E',\r\n            'data-named-value': '#3BA05E',\r\n            'data-import': '#006F78',\r\n            'data-doctype': '#586e75',\r\n\r\n            selectorUnderScheme: valuables.repetitiveObjects[1],\r\n\r\n            lines: valuables.repetitiveRulesObjects[5]\r\n\r\n        },\r\n\r\n        olive: { // Black background, Olive\r\n\r\n            'background-color': '#131313',\r\n\r\n            'data-rest': '#f5f5f5',\r\n            'data-string': '#94DA2C',\r\n            'data-keyword-fc': '#268bd2',\r\n            'data-keyword-sc': '#D3C440',\r\n            'data-keyword-tc': '#FF6FE3',\r\n            'data-comment': '#586e75',\r\n            'data-markup': '#00CA61',\r\n            'data-attribute': '#4CA20E',\r\n            'data-selector': '#00CA61',\r\n            'data-variable': '#FF6FE3',\r\n            'data-function': '#7A63F8',\r\n            'data-number': '#268bd2',\r\n            'data-rule': '#D3C440',\r\n            'data-hex': '#268bd2',\r\n            'data-unit': '#7A63F8',\r\n            'data-named-value': '#00CA61',\r\n            'data-import': '#D3C440',\r\n            'data-doctype': '#D3C440',\r\n\r\n            selectorUnderScheme: valuables.repetitiveObjects[0],\r\n\r\n            lines: valuables.repetitiveRulesObjects[4]\r\n\r\n        },\r\n\r\n        peach: { // Black background, Peach\r\n\r\n            'background-color': '#171717',\r\n\r\n            'data-rest': '#b6b6b6',\r\n            'data-string': '#02916a',\r\n            'data-keyword-fc': '#00c26f',\r\n            'data-keyword-sc': '#00c26f',\r\n            'data-keyword-tc': '#02916a',\r\n            'data-comment': '#b6b6b6',\r\n            'data-markup': '#0096ff',\r\n            'data-attribute': '#00c26f',\r\n            'data-selector': '#00bfe5',\r\n            'data-variable': '#00bfe5',\r\n            'data-function': '#0096ff',\r\n            'data-number': '#00c26f',\r\n            'data-rule': '#0096ff',\r\n            'data-hex': '#00bfe5',\r\n            'data-unit': '#02916a',\r\n            'data-named-value': '#02916a',\r\n            'data-import': '#0096ff',\r\n            'data-doctype': '#b6b6b6',\r\n\r\n            selectorUnderScheme: valuables.repetitiveObjects[0],\r\n\r\n            lines: valuables.repetitiveRulesObjects[4]\r\n\r\n        },\r\n\r\n        banana: { // Black background, Banana\r\n\r\n            'background-color': '#101112',\r\n\r\n            'data-rest': '#515F6A',\r\n            'data-string': '#588ba4',\r\n            'data-keyword-fc': '#A57A9E',\r\n            'data-keyword-sc': '#00a4be',\r\n            'data-keyword-tc': '#C5735E',\r\n            'data-comment': '#515F6A',\r\n            'data-markup': '#7D8FA3',\r\n            'data-attribute': '#85A7A5',\r\n            'data-selector': '#A57A9E',\r\n            'data-variable': '#8081b8',\r\n            'data-function': '#45a989',\r\n            'data-number': '#00a4be',\r\n            'data-rule': '#8081b8',\r\n            'data-hex': '#45a989',\r\n            'data-unit': '#85A7A5',\r\n            'data-named-value': '#7D8FA3',\r\n            'data-import': '#45a989',\r\n            'data-doctype': '#405d6a',\r\n\r\n            selectorUnderScheme: valuables.repetitiveObjects[0],\r\n\r\n            lines: valuables.repetitiveRulesObjects[4]\r\n\r\n        },\r\n\r\n        mango: { // White background, Mango\r\n\r\n            'background-color': '#f8f1e9',\r\n\r\n            'data-rest': '#044C29',\r\n            'data-string': '#3f5238',\r\n            'data-keyword-fc': '#b72231',\r\n            'data-keyword-sc': '#6470a3',\r\n            'data-keyword-tc': '#ba1925',\r\n            'data-comment': '#DBA69D',\r\n            'data-markup': '#f92672',\r\n            'data-attribute': '#258bd3',\r\n            'data-selector': '#f92672',\r\n            'data-variable': '#8B56BF',\r\n            'data-function': '#f92672',\r\n            'data-number': '#3b3f58',\r\n            'data-rule': '#8B56BF',\r\n            'data-hex': '#b72231',\r\n            'data-unit': '#3f5238',\r\n            'data-named-value': '#f92672',\r\n            'data-import': '#8B56BF',\r\n            'data-doctype': '#044C29',\r\n\r\n            selectorUnderScheme: valuables.repetitiveObjects[1],\r\n\r\n            lines: valuables.repetitiveRulesObjects[5]\r\n\r\n        },\r\n\r\n        melon: { // White background, Melon\r\n\r\n            'background-color': '#f0f0f0',\r\n\r\n            'data-rest': '#404850',\r\n            'data-string': '#4c8f2f',\r\n            'data-keyword-fc': '#007020',\r\n            'data-keyword-sc': '#e5a00d',\r\n            'data-keyword-tc': '#d0b0b0',\r\n            'data-comment': '#a8b6c4',\r\n            'data-markup': '#007020',\r\n            'data-attribute': '#4070a0',\r\n            'data-selector': '#5b3674',\r\n            'data-variable': '#5b3674',\r\n            'data-function': '#4070a0',\r\n            'data-number': '#007020',\r\n            'data-rule': '#4070a0',\r\n            'data-hex': '#4c8f2f',\r\n            'data-unit': '#40a070',\r\n            'data-named-value': '#5b3674',\r\n            'data-import': '#4070a0',\r\n            'data-doctype': '#404850',\r\n\r\n            selectorUnderScheme: valuables.repetitiveObjects[1],\r\n\r\n            lines: valuables.repetitiveRulesObjects[5]\r\n\r\n        }\r\n\r\n    };\r\n\r\n    var utils = {\r\n\r\n        addListener: function(el, type, fn) {\r\n\r\n            el.addEventListener(type, fn, false);\r\n\r\n        },\r\n\r\n        removeListener: function(el, type, fn) {\r\n        \r\n            el.removeEventListener(type, fn, false);\r\n        \r\n        },\r\n\r\n        getLastLineWidth: function(element, linesContainer, lastLine) {\r\n\r\n            var textNodeFromContent = document.createTextNode(lastLine),\r\n                spanElement = document.createElement('span'),\r\n                width = null;\r\n                \r\n                spanElement.appendChild(textNodeFromContent);\r\n\r\n                linesContainer.appendChild(spanElement);\r\n\r\n                element.appendChild(linesContainer);\r\n\r\n                // Will include padding + border + lastLine width\r\n                width = linesContainer.offsetWidth;\r\n\r\n                element.removeChild(linesContainer);\r\n\r\n                return width;\r\n\r\n        },\r\n\r\n       /* Given specific element, return it's line-height.\r\n        * Some browsers may return rounded line-height and not the actual line-height.\r\n        * */\r\n        getLineHeight: function(element) {\r\n\r\n            var div = document.createElement('div'),\r\n                lineHeight = null;\r\n\r\n                div.innerHTML = '.';\r\n                div.style.setProperty('padding', '0', 'important');\r\n                div.style.setProperty('border', 'none', 'important');\r\n\r\n                element.appendChild(div);\r\n\r\n                lineHeight = div.offsetHeight;\r\n\r\n                element.removeChild(div);\r\n\r\n                return lineHeight;\r\n\r\n        },\r\n        \r\n        // Transform strStr to str-str\r\n        uncamelize: function(str) {\r\n\r\n            return str.replace(/[A-Z]/g, function(match) {\r\n\r\n                return '-' + match.toLowerCase();\r\n\r\n            });\r\n\r\n        },\r\n\r\n        // Transform str-str to strStr\r\n        camelize: function(str) {\r\n\r\n            return str.replace(/\\-(\\w)/g, function(match, letter){\r\n\r\n              return letter.toUpperCase();\r\n\r\n            });\r\n\r\n        },\r\n\r\n        getStyle: function(element, styleProp) {\r\n\r\n            var camilized = utils.camelize(styleProp),\r\n                returnedStyle = null;\r\n\r\n            if (document.defaultView && document.defaultView.getComputedStyle) {\r\n\r\n                returnedStyle = document.defaultView.getComputedStyle(element, null).getPropertyValue(styleProp);\r\n\r\n            } else {\r\n\r\n                returnedStyle = element.style[camilized]; \r\n    \r\n            }\r\n\r\n            return returnedStyle;\r\n\r\n        },\r\n\r\n        getHeight: function(element, lineHeight, paddingTop, paddingBot) {\r\n            \r\n           /* This function should return the right height of the content, for that I use\r\n            * element.scrollHeight I'm not involving element.offsetHeight\r\n            * due to the fact that using element.offsetHeight will not reflect the content height\r\n            * but the element height, with borders with paddings and for cases where there\r\n            * is overflow-x scrollbar due to hidden x-axis content it will also contain\r\n            * the scrollbar height, and wait, the offsetHeight will only be good\r\n            * when there is no hidden content, so basically instead of having a system where\r\n            * I must reset borders, padding and overflow(hidden) before calculation, and that\r\n            * is not all I also have to decide what height to use, scrollHeight or  offsetHeight, a\r\n            * mechanism I was using something like:\r\n            *\r\n            * element.style['overflow-x'] = 'hidden';\r\n            * element.style.padding = '0';\r\n            * element.style.borderTopWidth = '0'; // IE won't let me get the border, only the borderTopWidth/Bottom\r\n            * element.style.borderBottomWidth = '0';\r\n            *\r\n            * if(diff >= lineHeight) {\r\n            *   finalHeight = scrollH;\r\n            * } else {\r\n            *   finalHeight = offsetH;\r\n            * }\r\n            *\r\n            * numberOfLines = Math.floor(height / lineHeight);\r\n            *\r\n            * Let me say that the currently implemented mechanism will produce\r\n            * the same result as above mechanism with much less code, and also that mechanism\r\n            * was tested with IE9, Chrome, Firefox, Safari and Opera.\r\n            *\r\n            * The new mechanism let me only reset the padding, and for cases where\r\n            * the scrollHeight for some reason is a bit bigger than the actual height, it\r\n            * gives me lineHeight - 1 error range, let me explain:\r\n            *\r\n            * If I have 11 lines, lineHeight is 15px, the fix variable should be 0, but\r\n            * that is an ideal case where scrollHeight gives the right height, but the scrollHeight\r\n            * is not clear science and sometimes may return wrong height, for cases like that this mechanism\r\n            * gives us lineHeight - 1 error range, here is an example:\r\n            *\r\n            * 11 lines, lineHeight 15, scrollHeight = 170\r\n            * fix = (170 % 15) = 5\r\n            * height = 165\r\n            * As you can see, the actual element height should be 165, but scrollHeight reported 170, the\r\n            * error is 5, the error range is lineHeight - 1 = 14, so until we have scrollHeight = 180, not\r\n            * 175 nor 179, only 180 with lineHeight = 15 will gives us 12 lines, so even if\r\n            * scrollHeight report 179 we still have 11 lines.\r\n            * */\r\n\r\n            element.style.setProperty('padding-top', '0', 'important');\r\n            element.style.setProperty('padding-bottom', '0', 'important');\r\n\r\n            var scrollH = element.scrollHeight,\r\n                fix = scrollH % lineHeight;\r\n\r\n            element.style.setProperty('padding-top', paddingTop + 'px', 'important');\r\n            element.style.setProperty('padding-bottom', paddingBot + 'px', 'important');\r\n\r\n            return ( scrollH - fix );\r\n        \r\n        },\r\n\r\n        getNumberOfLines: function(element, linesContainer, lineHeight, paddingTop, paddingBot, paddingLeft) {\r\n\r\n           /* The first phase is getting the number of lines, the lastLineWidth variable will\r\n            * contain the width for the biggest line number inside valuables.linesClassName, it will\r\n            * be calculated with padding and border.\r\n            *\r\n            * After I have the lastLineWidth set, I know how much I have to \"push\" the padding-left of\r\n            * valuables.codeClassName.\r\n            *\r\n            * About how I set the padding-left, I'm using element.style to make it element specific,\r\n            * the more appropriate way is to get inside this function the color scheme(colorScheme[0]) and\r\n            * apply the padding-left to that specific color scheme, I also have to check if the rules was\r\n            * already added so I won't add them if there are more than one element with lines set and same\r\n            * color scheme, anyway this function is intended to be really simple, I don't need another\r\n            * parameter and another \"already added rules\" checks, so I just set element.style, it's simple\r\n            * and easy to understand, there is no a need for further complexity.\r\n            * \r\n            * Now here is the problem, what if the lastLineWidth will be so big that it made part of the\r\n            * code to break to the next line?\r\n            *\r\n            * Well in that kind of case there is a new line and the height is no longer the real height.\r\n            *\r\n            * So we have to recalculate the height and that is what we do with secondHeight and secondNumberOfLines.\r\n            *\r\n            * But why do we recalculate the secondLastLineWidth?, after a new line is created there is a\r\n            * small chance that the line will be for example 99, and the new line will be 100, well\r\n            * lastLineWidth(99) is smaller than secondLastLineWidth(100), no?, so to check that we\r\n            * have our if statement: if(lastLineWidth === secondLastLineWidth), that if statement is used\r\n            * to check whether the last line width was changed, if it won't changed, we don't have to\r\n            * recalculate the last line width and set valuables.codeClassName padding-left, so we just\r\n            * return secondNumberOfLines, but what if the there was a change between lastLineWidth and\r\n            * secondLastLineWidth?, in that case we first set the valuables.codeClassName padding-left,\r\n            * why do we do that?, well if secondLastLineWidth(100) is bigger than lastLineWidth(99) and\r\n            * valuables.codeClassName padding-left is based on the last line width then we should set it(again),\r\n            * but why do you call the function?, well it's a pretty long shot, but bear with me for a sec:\r\n            *\r\n            * What if we have many lines, at least half of them is really close to the right edge, and this\r\n            * specific user defined padding activated a chain reaction:\r\n            *\r\n            * 1. We have 10 lines, the padding was so big that it was pushed the characters to the right edge\r\n            *    and now we have 100 lines.\r\n            * \r\n            * 2. 100 lines is a new padding, so I set the valuables.codeClassName padding-left and I'm good to\r\n            *    go no?, well what if the new padding break each of the 100 lines into 15 lines each\r\n            *    and we now have 1500 lines.\r\n            *\r\n            * 3. So we do need to recalculate the height and the number of lines, and that is why I recall\r\n            *    our function, to reactivate the process until setting up valuables.codeClassName padding-left\r\n            *    won't break(potentially) so many lines, new lines is ok, but what about so many new lines that\r\n            *    causes a change(potentially) is the last line width, the last line width was changed, and now\r\n            *    we again have a change(again potentially) in the number of lines.\r\n            *\r\n            * The above loop is theoretically correct, although I'm pretty sure that there will be no \"normal use\"\r\n            * edge case where calling our function after we set valuables.codeClassName will be necessary(not to\r\n            * mention several times) I always like to be prepared for anything.\r\n            * \r\n            * And yes this function is a recursive function.\r\n            * */\r\n\r\n            var height = utils.getHeight(element, lineHeight, paddingTop, paddingBot),\r\n                numberOfLines = height / lineHeight,\r\n                lastLineWidth = utils.getLastLineWidth(element, linesContainer, numberOfLines);\r\n\r\n                element.style.setProperty('padding-left', ( paddingLeft + lastLineWidth ) + 'px', 'important');\r\n\r\n            var secondHeight = utils.getHeight(element, lineHeight, paddingTop, paddingBot),\r\n                secondNumberOfLines = secondHeight / lineHeight,\r\n                secondLastLineWidth = utils.getLastLineWidth(element, linesContainer, secondNumberOfLines);\r\n\r\n            if(lastLineWidth === secondLastLineWidth) {\r\n\r\n                return secondNumberOfLines;\r\n\r\n            } else {\r\n\r\n                element.style.setProperty('padding-left', ( paddingLeft + secondLastLineWidth ) + 'px', 'important');\r\n\r\n                return utils.getNumberOfLines(element, linesContainer, lineHeight, paddingTop, paddingBot, paddingLeft);\r\n\r\n            }\r\n\r\n        },\r\n\r\n        isNative: function(checkMe) {\r\n\r\n            return valuables.nativePattern.test(checkMe);\r\n\r\n        },\r\n\r\n        shortArray: function(arrayToShort) {\r\n\r\n            arrayToShort.sort(function(a, b) {\r\n\r\n                return b.length - a.length; // ASC -> a - b; DESC -> b - a\r\n\r\n            });\r\n\r\n        },\r\n\r\n        addCSSRule: function(sheet, selector, rules, index) {\r\n\r\n            if(index === undefined) {\r\n\r\n                // sheet.cssRules used for Gecko.\r\n                index = sheet.rules ? sheet.rules.length : sheet.cssRules.length;\r\n\r\n            }\r\n\r\n            if('cssRules' in sheet) { // IE >= 9\r\n\r\n               /* As far As I know Chrome have a problem with ::-moz-selection, I assume that Chrome\r\n                * think it's invalid pseudo element, maybe other WebKit browsers have the problem, and\r\n                * the reason I wrap the insertRule with a try block is that Chrome(maybe other WebKit) will\r\n                * generate an error and break the code.\r\n                *\r\n                * Another problem is when I supply multiple rules to the rules parameters as:\r\n                *\r\n                * 'border-right: 0;' +\r\n                * 'border-top: 0;' +\r\n                * 'border-left: 0;';\r\n                *\r\n                * If the one of the rules above would be written as: 'border-right: 0' without\r\n                * the ';' at the end the will be an infinite loading on chrome(as far as I checked).\r\n                * */\r\n                try {\r\n\r\n                    sheet.insertRule(selector + \"{\" + rules + \"}\", index);\r\n                    \r\n                } catch(e) {}\r\n\r\n            }\r\n\r\n        },\r\n\r\n        hasClass: function(element, classToCheck) {\r\n\r\n            var patt = new RegExp('(\\\\s|^)'+ classToCheck +'(\\\\s|$)');\r\n\r\n            return patt.test(element.className);\r\n\r\n        },\r\n\r\n        getSheet: function() {\r\n        \r\n            // Create the style tag.\r\n            var style = document.createElement(\"style\");\r\n\r\n           /* Add a media (and/or media query) here if you'd like!\r\n            * style.setAttribute(\"media\", \"screen\")\r\n            * style.setAttribute(\"media\", \"only screen and (max-width : 1024px)\")\r\n            * */\r\n\r\n            // WebKit hack.\r\n            style.appendChild(document.createTextNode(\"\"));\r\n\r\n           /* Append the style element to the head element.\r\n            *\r\n            * I wanted to use document.head but document.head is only supported by IE >= 9\r\n            * */\r\n            document.getElementsByTagName('head')[0].appendChild(style);\r\n\r\n            // style.sheet is for IE >= 9\r\n            return style.sheet;\r\n\r\n        }\r\n\r\n    };\r\n\r\n   /* Different keywords are separated just because it looks better.\r\n    * There are 3 categories:\r\n    * 1. First category, mostly internal words.\r\n    * 2. Second category, creators like class, final, for.\r\n    * 3. Third category, php predefined constants.\r\n    *\r\n    * I decided to put the keywords variable as local to this function because they won't change between pre tags.\r\n    * */\r\n    var Keywords = {\r\n\r\n        javascriptKeywords: {\r\n\r\n            // Javascript Keywords.\r\n            FC: ['from', 'arguments', 'boolean', 'break', 'byte', 'case', 'char', 'const', 'continue', 'debugger', 'default', 'delete', 'double', 'enum', 'eval', 'extends', 'false', 'finally', 'float', 'goto', 'implements', 'instanceof', 'int', 'long', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static', 'super', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'typeof', 'void', 'volatile', 'with', 'yield'],\r\n\r\n            // Javascript Keywords.\r\n            SC: ['as', 'class', 'catch', 'abstract', 'do', 'else', 'final', 'for', 'function', 'if', 'in', 'interface', 'let', 'var', 'switch', 'try', 'while'],\r\n\r\n           /* According to TC39, ECMAScript 6 modules, the final syntax uses the following keywords:\r\n            * export, import, from, as, default\r\n            *\r\n            * There are many syntax combination for them and I was the syntaxes to appear with as many colors\r\n            * as I can, 'default' already in FC, 'as' was added to SC, 'from' keyword will go with(syntax manner)\r\n            * 'import' while 'default' will go with 'export' so it's safe to drop 'from' at FC, finally\r\n            * 'export' and 'import' getting their own colors.\r\n            * */\r\n            TC: ['export', 'import']\r\n\r\n        },\r\n\r\n        phpKeywords: {\r\n\r\n            // Php keywords.\r\n            FC: ['__halt_compiler', 'and', 'array', 'as', 'break', 'callable', 'case', 'clone', 'const', 'continue', 'declare', 'default', 'die', 'echo', 'empty', 'enddeclare', 'endfor', 'endforeach', 'endif', 'endswitch', 'endwhile', 'eval', 'exit', 'extends', 'global', 'goto', 'include', 'include_once', 'instanceof', 'insteadof', 'interface', 'isset', 'list', 'namespace', 'new', 'or', 'print', 'private', 'protected', 'public', 'require', 'require_once', 'return', 'static', 'unset', 'use', 'xor', 'var_dump'],\r\n            \r\n            // Php keywords.\r\n            SC: ['implements', 'abstract', 'catch', 'class', 'do', 'else', 'elseif', 'final', 'for', 'foreach', 'function', 'var', 'while', 'throw', 'try', 'trait', 'switch', 'if'],\r\n\r\n            // PHP predefined constants.\r\n            TC: ['__CLASS__', '__DIR__', '__FILE__', '__FUNCTION__', '__LINE__', '__METHOD__', '__NAMESPACE__', '__TRAIT__']\r\n            \r\n        }\r\n\r\n    }\r\n\r\n   /* Support for ECMAScript 5.1 and ECMAScript 6 / Unicode v7.0.0\r\n    *\r\n    * Explanation about the following pattern, the reason for using it and more can be found at: https://mothereff.in/js-variables\r\n    *\r\n    * The pattern was generated from: https://mathiasbynens.be/demo/javascript-identifier-regex\r\n    *\r\n    * There is a small different between the pattern for 5.1 and 6, 5.1 support \\u2E2F and 6 not so\r\n    * I'v used the 5.1 pattern to support both.\r\n    *\r\n    * I'v changed the pattern to suit my needs:\r\n    *   - A-Z was replaced by i flag\r\n    *   - 0-9 was replaced replaced by \\d\r\n    *   - \\ was added before _\r\n    *   - ^ and $ was removed because g flag is used\r\n    *   - The (?!keyword|keyword) was removed because keywords will be already wrapped(won't appear inside fullRest parameter)\r\n    *\r\n    * I decided to insert the pattern into a variable here(globally) because it used by few functions.\r\n    * */\r\n    var javascriptIdentifierRegex = /(?:[\\$\\_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC])(?:[\\$\\d\\_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]*)/gi;\r\n    \r\n    var units = ['em', 'ex', 'ch', 'rem', 'vw', 'vh', 'vmin', 'vmax', '%', 'px', 'cm', 'mm', 'in', 'pt', 'pc'];\r\n\r\n   /* I'm not really have to sort this array but just in case a future update will have for example 'pxer', that will\r\n    * cause the 'px' unit if it comes befor the 'pxer' unit to 'steal' the characters 'px' from 'pxer' and hence\r\n    * the 'pxer' will never be found.\r\n    * */\r\n    utils.shortArray(units);\r\n\r\n    function init() {\r\n\r\n        // Once the page has loaded I insert the sheet(style element) into the page.\r\n        valuables.sheet = utils.getSheet();\r\n\r\n        // After I set the sheet above I set up some basic css rules.\r\n\r\n        // Default '.' + valuables.codeClassName rules\r\n        utils.addCSSRule(valuables.sheet, '.' + valuables.codeClassName,\r\n\r\n       /* The code element is an inline level element, the background color is applied valuables.codeClassName\r\n        * and since this element is the code element(inline level) I must set it to block level element\r\n        * so the full block will get the background color and not only code lines(span elements within\r\n        * this code element).\r\n        *\r\n        * The data-scroll is optional, unless specify, I let the user to decide height/width and\r\n        * I set both overflow-x, overflow-y to auto, I could have used overflow: auto, but I like\r\n        * to be specific.\r\n        *\r\n        * The text-align and direction are used so the web page direction/text-align won't mess up the code.\r\n        * */\r\n        'display: block;' +\r\n        'overflow-y: auto;' +\r\n        'overflow-x: auto;' +\r\n        'direction: ltr;' +\r\n        'text-align: left;');\r\n\r\n        // Default '.' + valuables.codeClassName + ' .' + valuables.linesClassName rules.\r\n        utils.addCSSRule(valuables.sheet, '.' + valuables.codeClassName + ' .' + valuables.linesClassName, \r\n\r\n        // Users may decide to set some div borders, I can't let this affect on this specific div.\r\n        'border-top: 0;' +\r\n        'border-bottom: 0;' +\r\n        'border-left: 0;' +\r\n\r\n        'position: absolute;' +\r\n        'left: 0;' +\r\n        'top: 0;' +\r\n        'margin: 0;' +\r\n\r\n        // Disable selection to preven selecting lines when selecting code.\r\n        '-webkit-touch-callout: none;' +\r\n        '-webkit-user-select: none;' +\r\n        '-khtml-user-select: none;' +\r\n        '-moz-user-select: none;' +\r\n        '-o-user-select: none;' +\r\n        '-ms-user-select: none;' +\r\n        'user-select: none;');\r\n\r\n        // Default '.' + valuables.codeClassName + ' .' + valuables.linesClassName + ' span' rules\r\n        utils.addCSSRule(valuables.sheet, '.' + valuables.codeClassName + ' .' + valuables.linesClassName + ' span',\r\n            \r\n        'display: block;' +\r\n        'text-align: center;' +\r\n\r\n       /* utils.getLastLineWidth functioning depend upon bot padding left/right\r\n        * to be 0 since utils.getLastLineWidth won't calculate the span padding but\r\n        * only the valuables.linesClassName, so the user may set paddings via valuables.linesClassName\r\n        * for a specific scheme padding: .schemName .linesClassName\r\n        * */\r\n        'padding-left: 0 !important;' +\r\n        'padding-right: 0 !important;');\r\n\r\n        utils.removeListener(window, 'load', init);\r\n        \r\n       /* The reason for not combining the following iterations with one of the below iterations is because\r\n        * the below iterations depends on the existence valuables.withMeaning objects(keys that contains objects,\r\n        * javascriptKeywords, etc). \r\n        * */\r\n        for(var outerKey in Keywords) {\r\n\r\n           /* The reason to define categories is so the blow iterations systems won't have to redefine it.\r\n            * If I won't define it each of the systems won't know if categories was defined because the\r\n            * system phase where categories is defined is depends upon whether valuables.withMeaning\r\n            * got key(specific ones(multiMeaning) or just iterate it there are any\r\n            * keys at all(valuables.withMeaning)) or not.\r\n            * */\r\n            var categories = Keywords[outerKey];\r\n\r\n            for(var innerKey in categories) {\r\n\r\n                /* I must sort the array because for example if replace will iterate over this array: \r\n                 * ['var', 'var_dump'] and the code contains 'var_dump', but first as you can see\r\n                 * replace will match 'var' to 'var'_dump and result with <span>var</span>_dump\r\n                 * */\r\n                utils.shortArray(categories[innerKey]);\r\n\r\n            }\r\n\r\n        }\r\n\r\n       /* I know that the below(below this iteration there is another iteration system) iterations is very\r\n        * simular to the following iterations but the required categories variable that is needed\r\n        * for the following:\r\n        *\r\n        * var index = categories[innerKey].indexOf(multiMeaningInnerKey);\r\n        *\r\n        * Only set after the if(Keywords[outerKey]) from the below iterations, \r\n        * and the required innerKey(from the above var index) is only set after\r\n        * the for(innerKey in categories) from the below iterations\r\n        * that inside the if(Keywords[outerKey]) statement(again from the below iterations),\r\n        * that means that for each of the valuables.withMeaning objects\r\n        * the operation of the multiMeaning that should happen once, actualy happends as following:\r\n        *\r\n        * If the valuables.withMeaning contain javascriptKeywords only it will run over its categories and for now\r\n        * there are only 2 categories, if valuables.withMeaning also have phpKeywords, phpKeywords have\r\n        * 3 categories, so the for(multiMeaningInnerKey in valuables.withMeaning.multiMeaning) will run 3 times,\r\n        * and for case where both javascriptKeywords and phpKeywords exists it will run 5 times and that\r\n        * is unnecessary and performance downer.\r\n        *\r\n        * The following iteration system must appear before the below iterations system to allow each\r\n        * javascript/php keywords to override the \"common to all\" multiMeaning.\r\n        *\r\n        * The reason for not redefine outerKey, innerKey and categories is that above iterations\r\n        * system(sort) already define them and the sort iterations system will run all\r\n        * the time(not depending for example on valuables.withMeaning objects),\r\n        * and therefore I don't see a reason to redefine them.\r\n        * */\r\n        if(valuables.withMeaning.multiMeaning) { // First check if there is multiMeaning key.\r\n\r\n            for(var multiMeaningInnerKey in valuables.withMeaning.multiMeaning) {\r\n\r\n                for(outerKey in Keywords) {\r\n\r\n                    categories = Keywords[outerKey];\r\n\r\n                    for(innerKey in categories) {\r\n\r\n                        var index = categories[innerKey].indexOf(multiMeaningInnerKey);\r\n\r\n                        if(index > -1) {\r\n\r\n                            categories[innerKey][index] = fixFixer(valuables.withMeaning.multiMeaning[multiMeaningInnerKey], categories[innerKey][index]);\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // I don't need to redefine outerKey, innerKey and categories, reason is explained at above iterations system.\r\n        for(outerKey in valuables.withMeaning) { // Iterate each valuables.withMeaning objects.\r\n\r\n            // Are there Keywords objects(javascriptKeywords, phpKeywords, etc) that matches this meaning key?\r\n            if(Keywords[outerKey]) {\r\n\r\n                categories = Keywords[outerKey]; // Give me the categories.\r\n\r\n                 for(innerKey in categories) { // Iterate over categories.\r\n\r\n                     for(var meaningInnerKey in valuables.withMeaning[outerKey]) {\r\n\r\n                        var index = categories[innerKey].indexOf(meaningInnerKey);\r\n\r\n                        if(index > -1) {\r\n\r\n                            categories[innerKey][index] = fixFixer(valuables.withMeaning[outerKey][meaningInnerKey], categories[innerKey][index]);\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        var textAreaElements = document.getElementsByTagName('textarea'),\r\n            i = textAreaElements.length;\r\n\r\n        while(i--) {\r\n\r\n            if(utils.hasClass(textAreaElements[i], valuables.codeClassName)) {\r\n\r\n                var colorScheme = (function() {\r\n\r\n                    var defaultColorScheme = null,\r\n\r\n                        colorSchemeAttribute = textAreaElements[i].getAttribute('data-color-scheme'),\r\n                        validScheme = false,\r\n                        // I'm using j because textAreaElements[i] using i.\r\n                        j = 0;\r\n\r\n                    for(var schemeKey in colorSchemes) {\r\n\r\n                        if(j === 0) { // First iteration to fetch first color scheme.\r\n\r\n                            defaultColorScheme = colorSchemes[schemeKey];\r\n\r\n                            if( ! colorSchemeAttribute) {\r\n\r\n                                // The default color scheme is considered a valid color scheme.\r\n                                validScheme = true;\r\n\r\n                                consoleLog('No data-color-scheme attribute, default color scheme was chosen.');\r\n\r\n                                break;\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                       /* Trim is used if the user defined data-color-scheme=\" schName\", the space should be trimed.\r\n                        * toLowerCase is used because the object keys are case sensitive and the user may define data-color-scheme=\"Schemename\"\r\n                        * */\r\n                        if(colorSchemeAttribute.trim().toLowerCase() === schemeKey) {\r\n\r\n                            validScheme = true;\r\n\r\n                            defaultColorScheme = colorSchemes[schemeKey];\r\n\r\n                            break;\r\n\r\n                        }\r\n\r\n                        j++;\r\n\r\n                    }\r\n\r\n                    // defaultColorScheme can be the default(the first color scheme inside the colorSchemes object) or overridden default(user choice).\r\n                    return [schemeKey, defaultColorScheme, validScheme];\r\n\r\n                })();\r\n\r\n                var syntaxAttribute = textAreaElements[i].getAttribute('data-syntax');\r\n\r\n                if(syntaxAttribute) {\r\n\r\n                    var urlAttribute = textAreaElements[i].getAttribute('data-url'),\r\n                        syntax = null;\r\n\r\n                    for(var syntaxKey in valuables.validSyntaxes) {\r\n\r\n                        var currentSyntax = valuables.validSyntaxes[syntaxKey];\r\n\r\n                        // Trim is used if the user defined data-syntax=\" javascript\", the space should be trimed.\r\n                        if(syntaxAttribute.trim() === currentSyntax) {\r\n\r\n                            syntax = currentSyntax;\r\n\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n\r\n                    if(syntax) {\r\n\r\n                        if(colorScheme[2]) {\r\n\r\n                           /* This if statement is used to prevent multiple elements with the same scheme to add the same\r\n                            * color scheme over and over into the style element at the head element.\r\n                            *\r\n                            * The idea is similar to use array and each time push and new element and then check with some\r\n                            * inArray(in the sence of javascript) function, I decided to do something that is a big more\r\n                            * easy and doesn't require the need to include my own implementation of inArray, the idea is\r\n                            * to keep an object where this object keys are the scheme(that already included) names and\r\n                            * the values are always true, and when I check for valuables.insertedColorSchemes[colorScheme[0]]\r\n                            * and if the scheme is already included in the page, the scheme won't be reloaded(styles will be\r\n                            * included again), if there isn't a key or there is but the value is not true I will load the styles,\r\n                            * keep in mind that all values should be true, I only care about the key existence, hence when the value\r\n                            * is true then this value key should be a color scheme name.\r\n                            * */\r\n                            if( ! valuables.insertedColorSchemes[colorScheme[0]]) {\r\n\r\n                                valuables.insertedColorSchemes[colorScheme[0]] = true;\r\n\r\n                                // colorScheme[1] is the color scheme object.\r\n                                for(var ruleName in colorScheme[1]) {\r\n\r\n                                   /* The pattern is used to check if the ruleName starts with data-\r\n                                    * the idea is not having to check for specific rules, for example:\r\n                                    * ruleName === 'background-color', what if I decide to add another\r\n                                    * rule, well I will have to remember to add the rule here, hence I decided\r\n                                    * to check with a pattern, I know there is a small chance to have a \"permanent\" rule\r\n                                    * that starts with data-, it's should be rare because the \"permanent\" rules should\r\n                                    * be minimal and what are the chances that those minimal rules will also contain rule\r\n                                    * that starts with data-\r\n                                    * */\r\n                                    if( ! valuables.dataPatt.test(ruleName)) {\r\n\r\n                                        switch(ruleName) {\r\n\r\n                                            case 'lines':\r\n\r\n                                                for(var linesRuleName in colorScheme[1][ruleName]) {\r\n\r\n                                                    utils.addCSSRule(valuables.sheet,\r\n                                                   /* Selector, for example: .codeClassName.schemeName .linesClassName\r\n                                                    * it can't just be .linesClassName as multiple scheme within one\r\n                                                    * page may override each other scheme lines rules, or add rules\r\n                                                    * that does not exists inside another scheme lines rules object.\r\n                                                    * */\r\n                                                    '.' + valuables.codeClassName +\r\n                                                    '.' + colorScheme[0] +\r\n                                                    ' .' // The lines class is inside the code element(reason for space before dot(' .'))\r\n                                                    + valuables.linesClassName,\r\n                                                    linesRuleName + ':' + colorScheme[1][ruleName][linesRuleName]); // Rule\r\n\r\n                                                }\r\n\r\n                                            break;\r\n\r\n                                            case 'selectorUnderScheme':\r\n\r\n                                                for(var selector in colorScheme[1][ruleName]) {\r\n\r\n                                                    var rulesCollection = '';\r\n\r\n                                                    for(var queryRuleName in colorScheme[1][ruleName][selector]) {\r\n\r\n                                                        rulesCollection += queryRuleName + ':' + colorScheme[1][ruleName][selector][queryRuleName] + ';';\r\n\r\n                                                    }\r\n\r\n                                                    utils.addCSSRule(valuables.sheet,\r\n                                                    '.' + valuables.codeClassName +\r\n                                                    '.' + colorScheme[0] +\r\n                                                    selector,\r\n                                                    rulesCollection);\r\n\r\n                                                }\r\n\r\n                                            break;\r\n\r\n                                            default:\r\n\r\n                                            // colorScheme[0] is the color scheme name, colorScheme[1] is the color scheme object.\r\n                                            utils.addCSSRule(valuables.sheet,\r\n                                            // Selector, for example: .codeClass.schemeName\r\n                                            '.' + valuables.codeClassName + '.' + colorScheme[0],\r\n                                            ruleName + ':' + colorScheme[1][ruleName]); // Rule\r\n\r\n                                        }\r\n\r\n                                    } else {\r\n\r\n                                        // colorScheme[0] is the color scheme name, colorScheme[1] is the color scheme object.\r\n                                        utils.addCSSRule(valuables.sheet,\r\n                                            // Selector, for example: .codeClass.schemeName [data-rest]\r\n                                            '.' + valuables.codeClassName + '.' + colorScheme[0] + ' ' + '[' + ruleName + ']',\r\n                                            'color' + ':' + colorScheme[1][ruleName]);\r\n                                        \r\n                                    }\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                          /* Before I replace the element I must to \"save\" the content, if I won't save it and the content\r\n                           * will be wrapped by the new element(not textarea) there may be problem because I must avoid any kind of markup\r\n                           * as described by formatContent function.\r\n                           * */\r\n                            var savedContent = textAreaElements[i].innerHTML,\r\n                                newPreElement = document.createElement('pre'),\r\n                                newCodeElement = newPreElement.appendChild(document.createElement('code'));\r\n\r\n                           /* I reset the margin for each pre element, the reason is that I don't want the user\r\n                            * to interact with anything other than valuables.codeClassName, and valuables.codeClassName is applied\r\n                            * to the code element but there is a default margin applied to the pre element, and that is why\r\n                            * I reset it.\r\n                            * */\r\n                            newPreElement.style.setProperty('margin', '0', 'important');\r\n\r\n                           /* I want the user the style the element via valuables.codeClassName and not for\r\n                            * some reason decide to decrease the width of the pre, or maybe he/she decreases some\r\n                            * other pre elements, I don't want it to affect this pre element.\r\n                            * */\r\n                            newPreElement.style.setProperty('width', '100%', 'important');\r\n\r\n\r\n                            // colorScheme[0] is the color scheme name, must appear before the element replacement.\r\n                            newCodeElement.className = textAreaElements[i].className + ' ' + colorScheme[0];\r\n\r\n                            if(textAreaElements[i].hasAttribute('data-lines')) {\r\n\r\n                                // I \"drag\" the data-lines into the newCodeElement for the ajax callback to identify it.\r\n                                newCodeElement.setAttribute('data-lines', textAreaElements[i].getAttribute('data-lines'));\r\n\r\n                            }\r\n\r\n                            if(textAreaElements[i].hasAttribute('id')) {\r\n\r\n                                // I also want to save any id attribute the user may or may not given to the textarea element.\r\n                                newCodeElement.setAttribute('id', textAreaElements[i].getAttribute('id'));\r\n\r\n                            }\r\n\r\n                            if(textAreaElements[i].hasAttribute('data-scroll')) {\r\n\r\n                                newCodeElement.setAttribute('data-scroll', textAreaElements[i].getAttribute('data-scroll'));\r\n\r\n                            }\r\n\r\n                            if(textAreaElements[i].hasAttribute('data-abs-width')) {\r\n\r\n                                newCodeElement.setAttribute('data-abs-width', '');\r\n\r\n                            }\r\n\r\n                            textAreaElements[i].parentNode.replaceChild(newPreElement, textAreaElements[i]);\r\n\r\n                            if(urlAttribute) {\r\n\r\n                                // Gets content, the callback function will use formatContent to format it and then innerHTML it.\r\n                                getByAjax(urlAttribute, newCodeElement, syntax, function(responseText, syntax, element, xhr) {\r\n\r\n                                    buildElement(element, responseText, syntax, urlAttribute);\r\n                                    \r\n                                }, function(element) {\r\n\r\n                                    element.innerHTML = '<span data-rest>Loading content...</span>';\r\n\r\n                                });\r\n\r\n                            } else {\r\n\r\n                               /* For cases where there is no data-url, it means that the code is already inside the\r\n                                * element(at least I hope so, but that is what I assumed by defaults).\r\n                                *\r\n                                * Also for those kind of cases I pass null instead of urlAttribute, the responsibility for\r\n                                * taking care whether the urlAttribute is null or not is upon the functions that needs it.\r\n                                * */\r\n                                buildElement(newCodeElement, savedContent, syntax, null);\r\n\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            consoleLog('Invalid color scheme, check data-color-scheme attribute.', true)\r\n\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        consoleLog('Invalid syntax, check data-syntax attribute.', true);\r\n\r\n                    }\r\n\r\n                } else {\r\n\r\n                    consoleLog('You must pick a syntax using data-syntax attribute.', true);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function buildElement(element, content, syntax, url) {\r\n\r\n        for(var elementStyle in codeElementStyles) {\r\n\r\n            if( codeElementStyles[elementStyle]['empty'] === undefined ||\r\n                codeElementStyles[elementStyle]['required'] === undefined ) {\r\n\r\n                /* The standard state for codeElementStyles[elementStyle] determine\r\n                 * it must contain empty and required properties, if one of them\r\n                 * isn't exist, it must be created.\r\n                 * */\r\n                 consoleLog( elementStyle + ' within codeElementStyles object is missing empty or required property', true);\r\n            \r\n            }\r\n\r\n            // From strStr to str-str\r\n            var uncamelize = utils.uncamelize(elementStyle),\r\n                // Then I add 'data-' infront of uncamelize variable.\r\n                attr = 'data-' + uncamelize;\r\n\r\n            if(element.hasAttribute(attr)) {\r\n\r\n                var attrVal = element.getAttribute(attr).toLowerCase();\r\n\r\n               /* The first condition checks if the current attribute can be empty,\r\n                * if it is empty then attrVal must be equal to '' and required\r\n                * property must be false, but at this point I only care that the\r\n                * empty is true, that means I can start iterate over rules.\r\n                *\r\n                * What about required?, well \r\n                * \r\n                *Presented only attribute, applied when presented with empty value\r\n                *  it is important\r\n                * to remember to set the attribute without value to empty string, I\r\n                * do it inside the switch right before I replace the textarea with the\r\n                * pre element.\r\n                * */\r\n                if(codeElementStyles[elementStyle].empty === true) {\r\n\r\n                    for(var ruleName in codeElementStyles[elementStyle]) {\r\n\r\n                        // I only want rules iterations, the pick/empty should be skipped.\r\n                        if(ruleName === 'pick' || ruleName === 'empty') {\r\n\r\n                            continue;\r\n\r\n                        }\r\n\r\n                       /* The rules value may be arrays if a specific rules have\r\n                        * several rule values to support several browsers.\r\n                        * */\r\n                        if(typeof codeElementStyles[elementStyle][ruleName] === 'array') {\r\n\r\n                            for(var ruleValueKey in codeElementStyles[elementStyle][ruleName]) {\r\n\r\n                                element.style.setProperty(ruleName, codeElementStyles[elementStyle][ruleName][ruleValueKey], 'important');\r\n\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            element.style.setProperty(ruleName, codeElementStyles[elementStyle][ruleName], 'important');\r\n                            \r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                } else { // empty === false\r\n\r\n                    if(attrVal === '') { // What if empty === false but attrVal is ''\r\n\r\n                        consoleLog('You must pick ' + attr + ' value', true);\r\n\r\n                    }\r\n\r\n                   /* I could combine the following if with the\r\n                    * attrVal === 'pick' || attrVal === 'required' if, and response\r\n                    * with invalid value, but I love precision.\r\n                    * */\r\n                    if(codeElementStyles[elementStyle][attrVal]) {\r\n\r\n                        // The pick/required keys are exceptionals keys, for the small chance the attribute value is pick nor required I must check.\r\n                        if(attrVal === 'pick' || attrVal === 'required') {\r\n\r\n                            consoleLog('Invalid attribute value: ' + attrVal, true);\r\n\r\n                        }\r\n\r\n                        for(var ruleName in codeElementStyles[elementStyle][attrVal]) {\r\n\r\n                           /* The rules value may be arrays if a specific rules have\r\n                            * several rule values to support several browsers.\r\n                            * */\r\n                            if(typeof codeElementStyles[elementStyle][attrVal][ruleName] === 'array') {\r\n\r\n                                for(var ruleValueKey in codeElementStyles[elementStyle][attrVal][ruleName]) {\r\n\r\n                                    element.style.setProperty(ruleName, codeElementStyles[elementStyle][attrVal][ruleName][ruleValueKey], 'important');\r\n\r\n                                }\r\n\r\n                            } else {\r\n\r\n                                element.style.setProperty(ruleName, codeElementStyles[elementStyle][attrVal][ruleName], 'important');\r\n                                \r\n                            }\r\n\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        // If the attribute value is not exists.\r\n                        consoleLog('Nonexistent attribute value: ' + attrVal, true);\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                if(codeElementStyles[elementStyle].required === true) {\r\n\r\n                    consoleLog('You must pick ' + attr + ' value', true);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // Before I calculate the lines I have to insert the content.\r\n        element.innerHTML = formatContent(content, syntax, url, true);\r\n\r\n        // Check whether the current(ajax related) code requested lines.\r\n        if(element.hasAttribute('data-lines')) {\r\n            \r\n            var lineHeight = utils.getLineHeight(element),\r\n                paddingTop = parseInt( utils.getStyle(element, 'padding-top') ),\r\n                paddingBot = parseInt( utils.getStyle(element, 'padding-bottom') ),\r\n                paddingLeft = parseInt( utils.getStyle(element, 'padding-left') ),\r\n                attrVal = element.getAttribute('data-lines'),\r\n                linesContainer = document.createElement('div');\r\n\r\n            linesContainer.className = valuables.linesClassName;\r\n\r\n           /* Some of the below calculations may assume the rules for specific\r\n            * elements(the defaults) were already applied, hence I add the rules before I do\r\n            * the below calculations, for now, all of the rules that the below\r\n            * calculations depend upon are applied at the start of the init function\r\n            * but, I think it's a good idea that any not defaults, but rules that needs a special\r\n            * treatment like the position and line-height below, those rules should be applied here.\r\n            * */\r\n\r\n           /* The color scheme or the user may decide to put some padding to valuables.linesClassName\r\n            * the idea is that the top/bottom padding for valubales.linesClassName is determined by\r\n            * valuables.codeClassName, I can't let the user define top/bottom padding as the top/bottom\r\n            * padding reflect the code top/bottom padding, the lines\r\n            * container should start('padding-top') where the code starts, and about\r\n            * the padding-bottom, if it will be really big it may\r\n            * make the code element higher than the code made it(the lines container determine\r\n            * the code element height instead of the code inside the code element).\r\n            *\r\n            * Below when I define valuables.linesClassName element I use the style attribute\r\n            * because the padding can be specific for example if the user\r\n            * adds an id to valuables.codeClassName element and at the css the user define some\r\n            * padding to this id.\r\n            *\r\n            * I also allow the user to send a padding value(in pixels), that value will be\r\n            * assign as the padding left/right. \r\n            * */\r\n            linesContainer.style.setProperty('padding-top', paddingTop + 'px', 'important');\r\n            linesContainer.style.setProperty('padding-bottom', paddingBot + 'px', 'important');\r\n\r\n            if(attrVal !== '') {\r\n\r\n                var defaultUnit = 'px'; // Default\r\n\r\n                for(var u in units) {\r\n\r\n                    var unitIndex = attrVal.indexOf(units[u]);\r\n\r\n                    if(unitIndex > -1) {\r\n\r\n                        // Override the default unit(px).\r\n                        defaultUnit = units[u];\r\n\r\n                        // There is no reason to keep the iteration.\r\n                        break;\r\n\r\n                    }\r\n                }\r\n\r\n                if(unitIndex  > -1) {\r\n\r\n                    var unitCoefficient = parseFloat(attrVal.slice(0, unitIndex));\r\n\r\n                } else {\r\n\r\n                    // I'm not using parseFloat because if there are no units, well pixels are integers.\r\n                    var unitCoefficient = parseInt(attrVal);\r\n\r\n                }\r\n\r\n                if(parseInt(unitCoefficient) !== NaN) {\r\n\r\n                    linesContainer.style.setProperty('padding-left', ( unitCoefficient + defaultUnit ), 'important');\r\n                    linesContainer.style.setProperty('padding-right', ( unitCoefficient + defaultUnit ), 'important');\r\n\r\n                } else {\r\n\r\n                    consoleLog('Invalid data-lines value');\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n           /* I need the element position to be relative/absolute or fixed to\r\n            * allow me to top/left position the valuables.linesClassName container\r\n            * so if the position is static I may set it to be relative, if not, well\r\n            * there are fixed or absolute and both will do the job.\r\n            *\r\n            * I use element.style because each code element can be differently positioned\r\n            * and and depending on each code element position I want to decide whether to\r\n            * apply relative positon or not.\r\n            * */\r\n            if(utils.getStyle(element, 'position') === 'static') {\r\n\r\n                element.style.setProperty('position', 'relative', 'important');  \r\n\r\n            }\r\n\r\n           /* Browsers may compute line-height: 1.3em to something like 18.7979797(just an example),\r\n            * the problem is that some of the browsers will return(utils.getLineHeight) rounded line-height,\r\n            * so for 18.79... I may get 18, now that is a problem, think about the following, I have 100\r\n            * lines of code, the browser compute 18.7 but return(utils.getLineHeight) 18,\r\n            * so 18.7 x 100 = 1870, 1870 is what I get from utils.getHeight, but 1870 / 18 = 103.8,\r\n            * if the line-height was really 18 the height should be 18 x 100 = 1800, there is 70 gap\r\n            * between the heights, that is two much for lineHeight-1 error range,\r\n            * \r\n            * The concept of error range of lineHeight-1 is explained within utils.getHeight.\r\n            * */\r\n            element.style.setProperty('line-height', lineHeight + 'px', 'important');\r\n\r\n            var numberOfLines = utils.getNumberOfLines(element,\r\n                                                        linesContainer,\r\n                                                        lineHeight,\r\n                                                        paddingTop,\r\n                                                        paddingBot,\r\n                                                        paddingLeft);\r\n\r\n            var lines = '';\r\n\r\n            while(numberOfLines--) {\r\n\r\n               /* numberOfLines + 1, the + 1 is because that loop will decrease\r\n                * the numberOfLines by 1 before the entering the loop and it will\r\n                * end with 0, hence I use + 1.\r\n                * */\r\n                lines = '<span>' + ( numberOfLines + 1 ) + '</span>' + lines;\r\n\r\n            }\r\n\r\n            linesContainer.innerHTML = lines;\r\n\r\n        }\r\n\r\n        // I check linesContainer existence because it's only defined inside the above if statement\r\n        if(linesContainer && linesContainer.innerHTML !== '') {\r\n\r\n            element.appendChild(linesContainer);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function fixFixer(fixMePattern, keyword) {\r\n\r\n       /* This function is used to help the user write a simpler regexp, for example the user(without this\r\n        * system) had to write regexp like: /(function)(?:\\s|\\()/, the first part of this function\r\n        * allow the user to write regexp like: /function(?:\\s|\\()/ and the second part allow the user\r\n        * to write regexp like: /function(\\s|\\()/ instead of /function(?:\\s|\\()/\r\n        *\r\n        * This pattern is used to automatically add ?: inside fix sub patterns, for example the user\r\n        * had to write /function(?:\\s|\\()/ but now the user can write /function(\\s|\\()/, as\r\n        * you can see there is no need for ?:, also for special cases as above, the regexp will ignore\r\n        * the internal \\( it won't do something like: \\(?: it will only add it to a valid sub pattern.\r\n        *\r\n        * There is a small problem with this regexp, if for example I have /(\\=\\s?)array/ the regexp will fail\r\n        * to match the '(' at the begining of the regexp because its requires at least 1 character that is not\r\n        * backslash(\\) and then it would be able to find any opening parenthesis((), so I fixed it with a\r\n        * small trick, I prepend a space(could have used any character) before the pattern and then remove it.\r\n        *\r\n        * Important note about the use of fixMePattern.source, the .source used to retrive the internal content of the\r\n        * pattern for example from: /somePattern/ to retrive somePattern, also the type after using .source is string\r\n        * rather then object, also the .source removes the slashes that wraps the pattern.\r\n        * \r\n        * The reason why I want only the internal content of the pattern is that when using .join('|') to concat all\r\n        * keywords patterns I don't want: keyword|/keyword/|keyword, the slashes CAN'T be there.\r\n        * */\r\n        fixMePattern = ' ' + fixMePattern.source;\r\n\r\n        fixMePattern = fixMePattern.replace(/(\\\\*?)\\(/g, function(match, subPattern) {\r\n\r\n            // The subPattern for cases where there are no backslashes will be empty string, so I need to check the length.\r\n            if(subPattern.length > 0) {\r\n\r\n               /* This is the tricky part, if the number of backslashes is even we understand that each\r\n                * backslashe escape the backslashe after him, hence no backslashe escapes the (\r\n                *\r\n                * If the number is odd, we understand that 1 backslash was left to escape the ( and\r\n                * hence we ignore this match.\r\n                * */\r\n                if(subPattern.length % 2 === 0) {\r\n\r\n                    return subPattern + '(' + '?:';\r\n\r\n                } else { // Odd number of backslashes.\r\n\r\n                    return match;\r\n\r\n                }\r\n                \r\n            } else {\r\n\r\n                return match + '?:';\r\n\r\n            }\r\n\r\n        });\r\n\r\n        // Now remove the space, otherwise for example ' (class)\\s' won't match 'class'(no space).\r\n        fixMePattern = fixMePattern.slice(1);\r\n      \r\n\r\n       /* I get the before and after pattern parts and replace something like: 'function(\\\\s|\\\\()'\r\n        * to something like '(function)(\\\\s|\\\\()'\r\n        *\r\n        * This part of the function must appear after the above replace, the reason is so I won't get\r\n        * keywords wraped with (?:keyword) because if this part will operate first it\r\n        * will add () around the keyword and then the second part will add ?: so we end up with (?:keyword)\r\n        * */\r\n        var index = fixMePattern.indexOf(keyword),\r\n\r\n            before = fixMePattern.slice(0, index),\r\n\r\n            after = fixMePattern.slice(index + keyword.length);\r\n\r\n        fixMePattern = before + '(' + keyword + ')' + after;\r\n\r\n        return fixMePattern;\r\n\r\n    }\r\n\r\n    function consoleLog(msg, isError) {\r\n\r\n        if(window.console && ! isError) {\r\n\r\n            console.log(valuables.codeClassName + ': ' + msg);\r\n\r\n        } else {\r\n\r\n            throw (valuables.codeClassName + ': ' + msg)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // IE 5.5+, Firefox, Opera, Chrome, Safari XHR object\r\n    function getByAjax(url, element, syntax, callbackSuccess, callbackUntilSuccess) {\r\n\r\n        try {\r\n\r\n            var xhr = new (XMLHttpRequest || ActiveXObject)('MSXML2.XMLHTTP.3.0');\r\n\r\n                xhr.open('GET', url, 1);\r\n\r\n                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n\r\n                xhr.onreadystatechange = function () {\r\n\r\n                    if(xhr.readyState > 3 && callbackSuccess) {\r\n\r\n                        if(xhr.status === 200) {\r\n\r\n                            callbackSuccess(xhr.responseText, syntax, element, xhr);\r\n                        \r\n                        } else {\r\n\r\n                            consoleLog('Loading: ' + url + ' failed with status: ' + xhr.status, true);\r\n\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        callbackUntilSuccess(element);\r\n\r\n                    }\r\n\r\n                };\r\n\r\n                xhr.send();\r\n\r\n        } catch (e) {\r\n        \r\n            consoleLog(e, true);\r\n        \r\n        }\r\n\r\n    };\r\n\r\n    function tinyInBetween(value, callback) {\r\n\r\n       /* The patterns within the functions(that calls union) that is used to detemine the value parameter here using\r\n        * like [\\s\\S]+ or [\\s\\S]* so spaces can be captured, for example getMarkups function can send\r\n        * '' for elements with no attributes at all(<p> for example) or with just empty spaces like ' ' from <p >.\r\n        *\r\n        * Another example is where the getRules may send us: ' ' for background: ;\r\n        * */\r\n        if(value.trim().length === 0) {\r\n\r\n            return value;\r\n        \r\n        }\r\n\r\n       /* The following system is very similar to inBetweenAllSteps function and well explained there.\r\n        * \r\n        * This system is used with multiple callback functions(getAttributes, getRuleValue, etc).\r\n        *\r\n        * I'm using subPattern.trim() before I call the callback(getAttributes) in both before and inBetween\r\n        * phases because there may be cases where elements appears like: <header ' '\"\">(before phase) or\r\n        * <header \"\"' '\"\">(inBetween phase) or just <header >(noSpan remain false) captured\r\n        * spaces for both above cases denoted by single quotes '', what will happen is\r\n        * that for example <header \"\"> will become <header  <span>\"\"</span>> the spaces will be captured\r\n        * inside the sub pattern to determine the value parameter also the second will capture\r\n        * hence I check for subPattern.trim().length > 0, the funny thing\r\n        * is that the callback(getAttributes) will not wrap the spaces with span because\r\n        * it expect at least 1 character([a-z]+) but I don't even want callback function to be called.\r\n        *\r\n        * I don't want to send to any callback function empty spaces I was given by any kind of\r\n        * funtion that uses union function(getRules, getMarkups, etc).\r\n        * */\r\n        var noSpans = false,\r\n\r\n            before = value.replace(/([\\s\\S]*?)<span/, function(match, subPattern) {\r\n\r\n            noSpans = true;\r\n\r\n            if(subPattern.trim().length > 0) {\r\n\r\n                return callback(subPattern) + '<span';\r\n\r\n            }\r\n\r\n            return match;\r\n\r\n        });\r\n\r\n        var inBetween = before.replace(/<\\/span>([\\s\\S]*?)<span/g, function(match, subPattern) {\r\n\r\n            if(subPattern.trim().length > 0) {\r\n\r\n                return '</span>' + callback(subPattern) + '<span';\r\n\r\n            }\r\n\r\n            return match;\r\n\r\n        });\r\n\r\n        var after = inBetween.replace(/<\\/span>((?:(?!<\\/span>)[\\s\\S])+)$/, function(match, subPattern) {\r\n\r\n            if(subPattern.trim().length > 0) {\r\n\r\n                return '</span>' + callback(subPattern);\r\n\r\n             }\r\n\r\n            return match;\r\n\r\n        });\r\n\r\n        return noSpans ? after : callback(after);\r\n\r\n    }\r\n\r\n    // The union function used to callbacks for tinyInBetween to process.\r\n    function union(value, callbacksArray) {\r\n\r\n        for(var key in callbacksArray) {\r\n\r\n            // I could skip the hasOwnProperty check but I'm using it just in case there is a problem with some browser.\r\n            if(callbacksArray.hasOwnProperty(key)) {\r\n\r\n                value = tinyInBetween(value, callbacksArray[key]);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return value;\r\n\r\n    }\r\n\r\n    function getHex(value) {\r\n\r\n        return value.replace(/\\#[a-z\\d]{3,6}/gi, function(match) {\r\n\r\n            return '<span data-hex>' + match + '</span>'\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function getUnits(value) {\r\n\r\n        var joinedUnits = units.join('|');\r\n\r\n        return value.replace(new RegExp('((' + joinedUnits + ')\\\\s+|(' + joinedUnits + ')$)', 'gi'), function(match) {\r\n\r\n            return '<span data-unit>' + match + '</span>'\r\n\r\n        });\r\n\r\n    }\r\n\r\n   // If for example there is a rule: font-family: 'Oswald', sans-serif; then it will wrap the sans-serif and not the ,\r\n    function getNamedValues(value) {\r\n\r\n        return value.replace(/[a-z]+(\\-[a-z]+)?/ig, function(match) {\r\n\r\n            return '<span data-named-value>' + match + '</span>';\r\n            \r\n        });\r\n\r\n    }\r\n\r\n    function getRules(rules) {\r\n\r\n        return rules.replace(/([^\\{\\}]+?)\\:([^\\{]+?)\\;/gi, function(match, rule, ruleValue) {\r\n\r\n            var returnedRule =  '<span data-rule>' + rule + '</span>' + ':';\r\n\r\n               /* Notice the the default for getStrings is 'General'.\r\n                *\r\n                * The order of the callbacksArray is important, why?, it is well explained inside getMarkups function.\r\n                *\r\n                * The getNumbers MUST appear last for any case where numbers appear inside getHex, getStrings, getUnits\r\n                * or maybe getNamedValues.\r\n                * */\r\n                var callbacksArray = [getStrings, getHex, getUnits, getNamedValues, getNumbers];\r\n\r\n                return (returnedRule + union(ruleValue, callbacksArray) + ';');\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function getSelectors(value) {\r\n\r\n       /* The value parameter may contain unwanted characters like: ; , }  { : ) ( and spaces, I want\r\n        * to filter out the selector or selector parts for example when the selector is: p:after the p and the after\r\n        * will be wrapped but not the : and hence the following pattern.\r\n        *\r\n        * As you can see I added ) and ( although there are selectors with parenthesis but I want the parenthesis\r\n        * to remain for the data-rest or data-parenthesis(if will added in the future), if future code will\r\n        * add data-parenthesis the ) and ( will be \"available\" to be wrapped.\r\n        * */\r\n        return value.replace(/[^\\;\\{\\}\\,\\:\\s\\)\\(]+/gi, function(match) {\r\n\r\n            return '<span data-selector>' + match + '</span>';\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function getAttributes(attributes) {\r\n\r\n        return attributes.replace(/[a-z]+(\\-[a-z]+)*/gi, function(match) {\r\n\r\n            return '<span data-attribute>' + match + '</span>';\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function getMarkups(fullRest, type) {\r\n\r\n        if(type === 'O') { // Opening tags\r\n\r\n            return fullRest.replace(/\\&lt\\;(\\s*[a-z\\d]+(?:\\-[a-z\\d]+)*?)(\\s[\\s\\S]*?)?\\&gt\\;/gi, function(match, tagName, attributes) {\r\n\r\n               /* The order of the callbacksArray is important, the reason is the callbacks regexp patterns.\r\n                *\r\n                * The idea is to separate concerns from each callback regex pattern,\r\n                * each pattern within each callback is meant to take care a small piece of information, smaller the piece\r\n                * better treatment the string gets.\r\n                *\r\n                * So the idea is that either the pattern take care of specific undeniable piece(such a strings) or\r\n                * the pattern take care of a deniable strings that can appear for example within strings 'deniable string'\r\n                * which result with: '<span>deniable string</span>' now the span's destroy any chance for\r\n                * the string pattern to catch the string when the string pattern phase is arrived.\r\n                *\r\n                * In case you decided to add some new phases you should always think what phase(callback pattern) used\r\n                * to extract deniable piece and what phase(callback pattern) is used to extract undeniable piece, the\r\n                * undeniable callbacks patterns will NEVER OVERLAP EACH OTHER hence you MUST use them first and you may\r\n                * change they order within the callbacksArray, BUT for deniable pieces you should think:\r\n                *\r\n                * 1. What pieces do I get after the undeniable callbacks executions?.\r\n                * 2. Unlike undeniable callbacks, deniable callbacks must keep a specific order within the callbacksArray.\r\n                *\r\n                * Why they can't change their order like undeniable callbacks?, it's because as I have mentioned\r\n                * undeniable callbacks patterns will NEVER OVERLAP EACH OTHER, but deniable callbacks patterns MAY OVERLAP.\r\n                *\r\n                * 3. With the above explanation you should think what piece I get from the last callback and adjust your pattern\r\n                * to suit the specific LEFT OVER pieces from the last callback.\r\n                *\r\n                * Notice the the default for getStrings is 'General'.\r\n                *\r\n                * The attributes parameter may be undefined so when its not I will apply the union function else an empty string.\r\n                * */\r\n                var callbacksArray = [getStrings, getAttributes];\r\n\r\n                attributes = attributes ? union(attributes, callbacksArray) : '';\r\n\r\n                return '&lt;<span data-markup>' + tagName + '</span>' + attributes + '&gt;';\r\n\r\n            });\r\n\r\n        } else { // type === C, closing tags\r\n\r\n            return fullRest.replace(/\\&lt\\;\\/(\\s*[a-z\\d]+(?:\\-[a-z\\d]+)*\\s*)\\&gt\\;/gi, function(match, subPattern) {\r\n\r\n                return '&lt;/<span data-markup>' + subPattern + '</span>&gt;';\r\n\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function getDocType(fullRest) {\r\n\r\n       /* I'm not using the g modifier since doctype should appear once.\r\n        *\r\n        * Differents doc types can be found: http://www.htmlhelp.com/tools/validator/doctype.html\r\n        * */\r\n        return fullRest.replace(/\\&lt\\;\\!DOCTYPE([\\s\\S]*?)\\&gt\\;/, function(match) {\r\n\r\n           /* I'm using * and not + in the regexp pattern, because I want to capture invalid\r\n            * doctypes like: <!DOCTYPE>, that is not really a doctype but I want to capture it\r\n            * anyway, to highlight it, I'm also not using \\s after the DOCTYPE in the pattern, again I don't\r\n            * care if the doctype is valid.\r\n            *\r\n            * I don't need to check anything because I wrap the all match with the data-doctype span, the\r\n            * reason for that is that I belive the doctype is a single unit, hence should be wrapped like one.\r\n            * */\r\n            return '<span data-doctype>' + match + '</span>';\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function getImport(fullRest) {\r\n\r\n       /* I wanted to use /\\@import\\s([\\s\\S]*?)\\;/gi with \\s after the \\@import but I decided that\r\n        * I want to capture even when the there is no really importing, for that kind of case I will just\r\n        * put the @import inside data-import span.\r\n        * */\r\n        return fullRest.replace(/\\@import([\\s\\S]*?)\\;/gi, function(match, subPattern) {\r\n\r\n           /* The pattern is using * and not +, that is why I'm using trim(), the reason for using * and\r\n            * not + is because if I use + and I have few imports like so:\r\n            *\r\n            * @import;\r\n            * @import url(\"bluish.css\") projection, tv;\r\n            * \r\n            * The + will force the regexp engine to collect a character, now if we already collected the\r\n            * @import, we only left with the ;, but wait, the + sign force us to collect at\r\n            * least single character, so now we are unable to match the closing ;, we\r\n            * actually can, we will match the ; that closes the this import:\r\n            *\r\n            * @import url(\"bluish.css\") projection, tv;\r\n            *\r\n            * So the subPattern(when using + instead of *) will collect:\r\n            * ';\r\n            * @import url(\"bluish.css\") projection, tv'\r\n            *\r\n            * And after we understood the use of *, because we are using * we must use trim()\r\n            * */\r\n            if(subPattern.trim().length > 0) {\r\n\r\n                // The order is not that much important here, only the getStrings must appear first.\r\n                var callbacksArray = [getStrings, getNamedValues];\r\n                \r\n               /* The only reason I won't wrap ; with span here is because getRules\r\n                * won't pick up ; signs that are outside of the curly brackets.\r\n                * */\r\n                return ('<span data-import>@import</span>' + union(subPattern, callbacksArray) + ';');\r\n\r\n            } else {\r\n\r\n                // I include the subPattern to preserve spaces.\r\n                return '<span data-import>@import</span>' + subPattern + ';';\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function getKeywords(fullRest, category, syntax) {\r\n\r\n       /* I use the toUpperCase before the properties names are in upperCase because\r\n        * the keys inside the Keywords objects are FC, SC and so on, the idea is that\r\n        * the key names represent words, FC = First Class, SC = Second Class.\r\n        * */\r\n        var currentKeywords = Keywords[(syntax + 'Keywords')][category.toUpperCase()];\r\n\r\n\r\n\r\n       /* Above the below system:\r\n        *\r\n        * For start I iterate the arguments and collect all the parameters before the\r\n        * offset parameter, I filter only none undefined parameters, the result is\r\n        * the main match and all sub patterns, there must be top 3 elements, the second key\r\n        * will always be the main sub pattern because I used unshift.\r\n        *\r\n        * The reason why there are top 3 elements is because when the user write a regexp like: '(\\\\=\\\\s)array'\r\n        * the fixFixer function will transform it into '(?:\\\\=\\\\s)(array)', because I don't capture the fix and\r\n        * capture the keyword I will always have 3 element(the match, the main sub pattern, the keyword sub pattern)\r\n        * notice that because I use unshift they are in reversed order(only for convenience reasons).\r\n        *\r\n        * */\r\n        return fullRest.replace(new RegExp('(' + currentKeywords.join('|') + ')', 'ig'), function() {\r\n\r\n            // This variables should be reset per replace callback execution.\r\n            var matchAndSubPatterns = [];\r\n\r\n            for(var key in arguments) {\r\n\r\n                var currentValue = arguments[key];\r\n\r\n                if(currentValue === parseInt(currentValue, 10)) { // Must be integer.\r\n\r\n                   /* About the subPattern variable below:\r\n                    *\r\n                    * There should always be at least 2 elements, if there is an\r\n                    * extra sub pattern from the fix there will be 3 elements.\r\n                    * \r\n                    * In case there is extra sub pattern due to fix this variable will represent the fix sub\r\n                    * pattern(keyword only), otherwise it will represent the main sub\r\n                    * pattern that wraps all keywords.\r\n                    * */\r\n                    var subPattern = matchAndSubPatterns[0],\r\n\r\n                        // Key 1 will always contain the main sub pattern(that wraps all keywords).\r\n                        match = matchAndSubPatterns[1],\r\n\r\n                        indexOfSubPattern = match.indexOf(subPattern),\r\n\r\n                        before = match.slice(0, indexOfSubPattern),\r\n\r\n                        after = match.slice(indexOfSubPattern + subPattern.length);\r\n\r\n                       /* The reason for using toLowerCase() is because I used above toUpperCase(),\r\n                        * why use toUpperCase() is explained above, the use of toLowerCase() is for consistency\r\n                        * the css rules using lower case, the browser is not case sensitive about it, but I love\r\n                        * consistency.\r\n                        * */\r\n                    return before + '<span data-keyword-' + category.toLowerCase() + '>' + subPattern + '</span>' + after;\r\n\r\n                } else {\r\n\r\n                    // I don't want to push undefined values, I only want the match and sub patterns.\r\n                    if(currentValue) {\r\n\r\n                       /* I use unshift so I can reference the match or sub pattern with\r\n                        * matchAndSubPatterns[0] instead of matchAndSubPatterns[matchAndSubPatterns.length - 1]\r\n                        * */\r\n                        matchAndSubPatterns.unshift(currentValue);\r\n                    \r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function getStrings(fullRest, type) {\r\n\r\n        if(type === 'Php') {\r\n\r\n           /* As you notice the sub pattern (\\'|\"\\|), the reason for the empty alternative is to support\r\n            * both php string syntaxes, the Nowdoc starts with <<<'EOT' and the\r\n            * Heredoc using <<<EOT, so to support both, the first option is 'EOT', second\r\n            * option is \"EOT\" and the third is just EOT.\r\n            *\r\n            * This pattern is a combination of the Nowdoc/Heredoc pattern and the ''/\"\" pattern, the reason for\r\n            * the combination is so the user won't have to keep the order between the stringsGeneral step and\r\n            * stringsPhp steps, if there is <<<'EOT' and stringsGeneral will act first it will break the stringsPhp\r\n            * so with that pattern I always check first for <<<'EOT', the final result is that the pattern keeps\r\n            * the order(the alternatives order), so intead the user have to keep the steps(stringsPhp then stringsGeneral)\r\n            * I allow the user to ignore the order.\r\n            *\r\n            * Support for Nowdoc and Heredoc php string syntaxes and also the single quotes('') and double quotes(\"\")\r\n            * */\r\n            return fullRest.replace(/(((\\&lt\\;){3}((\\'|\\\"|)([a-z\\_]+\\d*?)\\5)([\\s\\S]*?)\\6\\;)|((\\'|\\\")([\\s\\S]*?)\\9))/gi, function(match) {\r\n\r\n                return '<span data-string>' + match + '</span>';\r\n\r\n            });\r\n\r\n        } else { // type === 'General'\r\n\r\n            // For general '' or \"\" strings\r\n            return fullRest.replace(/(\\'|\\\")([\\s\\S]*?)\\1/g, function(match) {\r\n\r\n                return '<span data-string>' + match + '</span>';\r\n\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function getComments(fullRest, type) {\r\n\r\n        if(type === 'Single') {\r\n\r\n            /* Single line comments:\r\n             *\r\n             * Important notice I'm not using ^ to allow comments like:\r\n             *\r\n             * echo $key // here I echo variable\r\n             * or\r\n             * echo 'string' // here I echo string\r\n             *\r\n             * $ is used with /m to find single line comments, when the /m causes the $ to fine the end of\r\n             * the line.\r\n             * */\r\n            return fullRest.replace(/\\/\\/[\\S\\s]*?$/gm, function(match) {\r\n\r\n                return '<span data-comment>' + match + '</span>';\r\n\r\n            });\r\n\r\n        } else if(type === 'Block') {\r\n\r\n            // For php, javascript block comments.\r\n            return fullRest.replace(/\\/\\*[\\s\\S]*?\\*\\//g, function(match) {\r\n\r\n                return '<span data-comment>' + match + '</span>';\r\n\r\n            });\r\n\r\n        } else { // type === 'Markup'\r\n\r\n            // used for <!-- comment --> markup comments\r\n            return fullRest.replace(/(?:\\&lt\\;\\!\\-{2})([\\s\\S]*?)(?:\\-{2}\\&gt\\;)/g, function(match) {\r\n\r\n                return '<span data-comment>' + match + '</span>';\r\n\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function getFunctions(fullRest, type) {\r\n\r\n        // This function will always require a specific type, there is no default, for unknown type return the fullRest as is.\r\n        if(type === 'php') {\r\n\r\n            return fullRest.replace(/([a-z\\_\\x7f-\\xff][a-z\\d\\_\\x7f-\\xff]*?)(\\s*?\\()/gi, function(match, subPattern, rest) {\r\n\r\n                return '<span data-function>' + subPattern + '</span>' + rest;\r\n\r\n            });\r\n\r\n        } else if(type === 'javascript') {\r\n\r\n            var appendedRegExp = /(?=\\s*?\\()/,\r\n                finalRegExp = new RegExp(javascriptIdentifierRegex.source + appendedRegExp.source, 'gi');\r\n\r\n            return fullRest.replace(finalRegExp, function(match) {\r\n\r\n               // If the user source code contain > or < they will be replaced with &gt; or &lt; hence I must rule them out.\r\n                if(match === 'gt' || match === 'lt') {\r\n\r\n                    return match;\r\n\r\n                }\r\n\r\n                return '<span data-function>' + match + '</span>';\r\n\r\n            });\r\n\r\n        }\r\n\r\n        return fullRest;\r\n\r\n    }\r\n\r\n\r\n    function getVariables(fullRest, type) {\r\n\r\n        // This function will always require a specific type, there is no default, for unknown type return the fullRest as is.\r\n        if(type === 'php') {\r\n\r\n            // This pattern is a smaller version of the pattern form the php manual: http://php.net/manual/en/language.variables.basics.php\r\n            return fullRest.replace(/(\\$|public\\s+|protected\\s+|private\\s+|static\\s+)[a-z\\_\\x7f-\\xff][a-z\\d\\_\\x7f-\\xff]*/gi, function(match) {\r\n\r\n                return '<span data-variable>' + match + '</span>';\r\n            \r\n            });\r\n\r\n        } else if(type === 'javascript') {\r\n\r\n            return fullRest.replace(javascriptIdentifierRegex, function(match) {\r\n\r\n               // If the user source code contain > or < they will be replaced with &gt; or &lt; hence I must rule them out.\r\n                if(match === 'gt' || match === 'lt') {\r\n\r\n                    return match;\r\n\r\n                }\r\n\r\n                return '<span data-variable>' + match + '</span>';\r\n\r\n            });\r\n\r\n        }\r\n\r\n        return fullRest;\r\n\r\n    }\r\n\r\n    function getNumbers(fullRest) {\r\n\r\n       /* The pattern supports: 3, 3.3, I could replace the ? with * to support 3.3.3,\r\n        * but I don't see any need for 2 or more floating points.\r\n        *\r\n        * The pattern supports: -1, +1, --1, ++1, ---1, +++1 and so on, the +'s or -'s will also be wrapped.\r\n        * */\r\n        return fullRest.replace(/([-+]*\\d+(\\.\\d+)?)/g, function(match) {\r\n\r\n            return '<span data-number>' + match + '</span>';\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function getInsidePhp(fullRest, url) {\r\n\r\n        var preservedSpaces = null;\r\n\r\n       /* Valid php opening/closing tags:\r\n        *\r\n        *   <?php    ?>\r\n        *   <?       ?>\r\n        *   <%       %>\r\n        *   <%=      %>\r\n        *   <?=      ?>\r\n        * */\r\n        return fullRest.replace(/\\&lt\\;(\\?|\\%)(\\=|php\\s+|\\s+)([\\s\\S]*?)\\1\\&gt\\;/gi, function(match, openingClosingScriptTag, optionalPhpOrEqualSign, scriptContent) {\r\n\r\n            /* There is a small problem with the regexp above, the problem is that the regexp will match <%php %>, now\r\n             * I have 2 options:\r\n             *\r\n             * 1. Return the the fullRest, I think less prefered over the next option.\r\n             * 2. Remove the 'php' after the % and alert the user about it.\r\n             *\r\n             * I choose option 2, let me explain how it works:\r\n             *\r\n             * I first check if the openingClosingScriptTag is '%', I then check optionalPhpOrEqualSign.trim().toLowerCase() === 'php'\r\n             * if both conditions is true it means that the user mistakenly or none mistakenly used 'php' after '%', I want to\r\n             * auto fix it and let him know about it, I have to keep in mind that I want to preserve the spaces for example\r\n             * I use trim() because the optionalPhpOrEqualSign may contain '=' or 'php ' or ' '(only spaces for <? ?> or <% %>)\r\n             * so those spaces I want to preserve so I will append them to the preservedSpaces, I also want to remove the 'php' string\r\n             * if presented of course from the 'php ', so I will replace it by '' and then append the remaining spaces to preservedSpaces.\r\n             * I'm using toLowerCase for cases where optionalPhpOrEqualSign may be 'PHP ', I also use i flag with /php/i pattern inside\r\n             * the if statement to replace 'PHP ' or 'php ' with ''.\r\n             *\r\n             * You may have noticed that not as getInsideJavascript I'm using scriptContent.length > 0 instead of using\r\n             * scriptContent.trim().length > 0 because the (\\=|php\\s+|\\s+) third alternative is \\s+ so when there is\r\n             * no code the scriptContent be empty ''.\r\n             * */\r\n            if(openingClosingScriptTag === '%' && optionalPhpOrEqualSign.trim().toLowerCase() === 'php') {\r\n\r\n                preservedSpaces = optionalPhpOrEqualSign.replace(/php/i, '');\r\n\r\n                // The short if statement is used for cases where there is no data-url and hence there is no url, for that kind of case I will use different formulation.\r\n                consoleLog('Invalid php opening tag found: <%php %>, the <%php was replaced with <%, check ' + (url ? (url + ' source file') : 'the syntax')  + ', replace <%php with <% or use <?php ?>');\r\n\r\n            }\r\n\r\n            // Reason for using ([\\s\\S]*?) with * and not + is well explained at getInsideJavascript function.\r\n            return  '&lt;' +\r\n                    openingClosingScriptTag +\r\n                    (preservedSpaces ? preservedSpaces : optionalPhpOrEqualSign) +\r\n                    (scriptContent.length > 0\r\n\r\n                    // I can pass the url parameter but I pass null instead because there is no use for the url at this specific formatContent call.\r\n                    ? formatContent(scriptContent, 'php', null)\r\n                    : scriptContent) +\r\n                    openingClosingScriptTag +\r\n                    '&gt;';\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function getInsideStylesheet(fullRest) {\r\n\r\n        return fullRest.replace(/\\&lt\\;style(\\s+[\\s\\S]*?)?\\&gt\\;([\\s\\S]+?)\\&lt\\;\\/style\\&gt\\;/gi, function(match, attributes, stylesheetContent) {\r\n\r\n            // The attributes parameter may be undefined, for that kind of case I set it to empty string('').\r\n            if( ! attributes) {\r\n                attributes = '';\r\n            }\r\n\r\n            return '&lt;' + 'style' + attributes + '&gt;' + formatContent(stylesheetContent, 'stylesheet', null) + '&lt;' + '/' + 'style' + '&gt;';\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function getInsideJavascript(fullRest) {\r\n\r\n        var runAgain = true,\r\n            nextContent = fullRest,\r\n            returnedContent = '',\r\n            typeSearch = null;\r\n\r\n        while(runAgain) {\r\n\r\n            // Each iteration starts with false\r\n            runAgain = false;\r\n\r\n            returnedContent += nextContent.replace(/([\\s\\S]*?)(\\&lt\\;script(?:\\s+[\\s\\S]*?)?\\&gt\\;)([\\s\\S]*?)(\\&lt\\;\\/script\\&gt\\;)([\\s\\S]*)/i, function(match, before, openScriptTag, scriptContent, closeScriptTag, rest) {\r\n\r\n               /* The if statement below and the nextContent = rest; must appear before both return\r\n                * statements below because they are related with future iterations regardless the return value.\r\n                *\r\n                * The use of trim() at rest.trim().length > 0 is because the rest sub pattern is [\\s\\S]\r\n                * */\r\n                if(rest.trim().length > 0) {\r\n\r\n                    // To avoid unnecessary entering into the while loop, the replace won't execute but why even enter the loop.\r\n                    runAgain = true;\r\n\r\n                }\r\n\r\n                nextContent = rest;\r\n\r\n               /* The if statement below is used to avoid parsing non javascript type scripts, typeSearch is using\r\n                * a general pattern that consumes any content within the type attribute if there is type attribute.\r\n                * \r\n                * The pattern require at least 1 character but it may be a space character and that is the reason for\r\n                * the trim().\r\n                *\r\n                * I'm also using toLowerCase() because when I check trimedTypeSearch !== 'javascript' && trimedTypeSearch !== 'text/javascript'\r\n                * I'm checking lower case characters only because I may get: 'JavaScript' or 'JAVASCRIPT' or 'TEXT/javascript' and so on.\r\n                *\r\n                * Example for script element that doesn't contain javascript code:\r\n                *\r\n                *   <script type=\"text/ng-template\" id=\"/tpl1.html\">\r\n                *      <input ng-model=\"myPrimitive\">\r\n                *   </script>\r\n                *\r\n                * The above example is used in AngularJS framework.\r\n                *\r\n                * Please note that the language attribute was deprecated(http://www.w3.org/TR/html401/interact/scripts.html)\r\n                * hence not supported.\r\n                * */\r\n                typeSearch = openScriptTag.match(/type\\s*\\=\\s*('|\")([\\s\\S]+?)\\1/i);\r\n\r\n                if(typeSearch) { // No type attribute at all.\r\n\r\n                    var trimedTypeSearch = typeSearch[2] && typeSearch[2].trim().toLowerCase();\r\n\r\n                    if(trimedTypeSearch && trimedTypeSearch.length > 0) { // Type attribute is empty.\r\n\r\n                        if(trimedTypeSearch !== 'javascript' && trimedTypeSearch !== 'text/javascript' && trimedTypeSearch !== 'module') { // Nor javascript, text/javascript or module(for ecmascript 6 modules)\r\n\r\n                           /* I return all but the rest attribute, the idea is to \"forget\" the rest attribute because\r\n                            * the rest attribute is assined into the nextContent variable, we always iterate and replace\r\n                            * the nextContent variable, and we always return all but the rest attribute, regardless the return statement.\r\n                            * */\r\n                            return before + openScriptTag + scriptContent + closeScriptTag;\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n               /* I'm using ([\\s\\S]*?), notice the *, I'm using * and not + because for empty scripts for\r\n                * example: <script></script> the + will collect '<'/script> and because the ? it will then\r\n                * check the (\\&lt\\;\\/script\\&gt\\;) but we already skip the '<' so we will never match this\r\n                * closing script tag but the next closing script tag on the code, so instead of scriptContent\r\n                * contain the actual javascript content it will contain all the text from the first script\r\n                * closing tag(including the script tag itself) and all the way down until the next closing\r\n                * script tag, when using * it will first look for '' then check for <, so if there is empty\r\n                * code inside script tags the * will not collect the < as the + did hence we able to match\r\n                * the (\\&lt\\;\\/script\\&gt\\;) after the empty scriptContent.\r\n                * */\r\n                return  before +\r\n                        openScriptTag +\r\n                        (scriptContent.trim().length > 0\r\n                        ? formatContent(scriptContent, 'javascript', null)\r\n                        : scriptContent) + closeScriptTag;\r\n\r\n            });\r\n\r\n        }\r\n\r\n        return returnedContent;\r\n\r\n    }\r\n\r\n    function replacement(subPattern, type, defaultType, syntax, url) {\r\n\r\n        // The defaultType is used the determine the return value because before,inBetween,after uses different patterns.\r\n        var before = '',\r\n            after = '',\r\n            // The defaultType is checked for underfined for cases like noSpans that call this function manually without supplying value to this parameter.\r\n            defaultType = defaultType ? defaultType.toLowerCase() : defaultType;\r\n\r\n        if(defaultType === 'before') {\r\n\r\n            before = '';\r\n            after = '<span';\r\n\r\n        } else if(defaultType === 'inbetween') {\r\n\r\n            before = '</span>';\r\n            after = '<span';\r\n            \r\n        } else if(defaultType === 'after') {\r\n\r\n            before = '</span>';\r\n            after = '';\r\n\r\n        } else { // When noSpans inside inBetweenAllSteps remains false there is no default type hence null is the defaultType\r\n\r\n            before = '';\r\n            after = '';\r\n        \r\n        }\r\n\r\n        switch(type) {\r\n\r\n            case 'numbers':\r\n\r\n                return before + getNumbers(subPattern) + after;\r\n\r\n            break;\r\n\r\n            case 'stylesheetImport':\r\n\r\n                return before + getImport(subPattern) + after;\r\n\r\n            break;\r\n\r\n            case 'docType':\r\n\r\n                return before + getDocType(subPattern) + after;\r\n\r\n            break;\r\n\r\n            case 'insideJavascript':\r\n\r\n                return before + getInsideJavascript(subPattern) + after;\r\n\r\n            break;\r\n\r\n            case 'insidePhp':\r\n\r\n                return before + getInsidePhp(subPattern, url) + after;\r\n\r\n            break;\r\n\r\n            case 'insideStylesheet':\r\n\r\n                return before + getInsideStylesheet(subPattern) + after;\r\n\r\n            break;\r\n\r\n            case 'stylesheetRules':\r\n\r\n                return before + getRules(subPattern) + after;\r\n\r\n            break;\r\n\r\n            case 'stylesheetSelectors':\r\n\r\n                return before + getSelectors(subPattern) + after;\r\n\r\n            break;\r\n\r\n            default:\r\n\r\n               /* A note about the order, you can change the order, even if you think about the following:\r\n                * \r\n                * What if the type is 'commentsMarkup' and type.indexOf('markup') came first, what then?\r\n                * well the indexOf is case sensitive so type.indexOf('markup') will return -1 for 'commentsMarkup'\r\n                * */\r\n                if(type.indexOf('keywords') > -1) {\r\n\r\n                   /* slice(-2) is used to extract the last 2 characters as\r\n                    * the categorie, for example from 'KeywordsFC' extract 'FC'\r\n                    * */\r\n                    return before + getKeywords(subPattern, type.slice(-2), syntax) + after;\r\n\r\n                } else if(type.indexOf('comments') > -1) {\r\n\r\n                    /* slice(8) is used to extract the characters after the 8 character to get\r\n                     * Block(capital B) or Single(capital S), for example from 'commentsSingle' get 'Single'\r\n                     * */\r\n                    return before + getComments(subPattern, type.slice(8)) + after;\r\n\r\n                } else if(type.indexOf('markup') > -1) {\r\n\r\n                   /* substr(6, 1) is used to extract the last character to identify if it should\r\n                    * replace opening or closing tag, for example from 'markupOpeningTags' extract 'O'\r\n                    * */\r\n                    return before + getMarkups(subPattern, type.substr(6, 1)) + after;\r\n\r\n                } else if(type.indexOf('strings') > -1) {\r\n\r\n                    /* slice(7) is used to extract the characters after the 7 character to get\r\n                     * Php(capital P) or General(capital G), for example from 'stringsGeneral' get 'General'\r\n                     * */\r\n                    return before + getStrings(subPattern, type.slice(7)) + after;\r\n\r\n                } else if(type.indexOf('Variables') > -1) {\r\n\r\n\r\n                    /* type.slice(0, type.indexOf('Variables')) is used to extract the characters that\r\n                     * before the 'Variables' string, for example extract 'php' from 'phpVariables'\r\n                     * */\r\n                    return before + getVariables(subPattern, type.slice(0, type.indexOf('Variables'))) + after;\r\n\r\n                } else if(type.indexOf('Functions') > -1) {\r\n\r\n                    /* type.slice(0, type.indexOf('Functions')) is used to extract the characters that\r\n                     * before the 'Functions' string, for example extract 'php' from 'phpFunctions'\r\n                     * */\r\n                    return before + getFunctions(subPattern, type.slice(0, type.indexOf('Functions'))) + after;\r\n\r\n                } else { // Default is rest, I didn't think about making function just so it returnes strings so:\r\n\r\n                    return before + '<span data-rest>' + subPattern + '</span>' + after;\r\n\r\n                }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function inBetweenAllSteps(content, type, syntax, url) {\r\n\r\n        // Explained below.\r\n        var noSpans = false,\r\n\r\n           /* About the type attribute:\r\n            * There may be 2 types of call to this function, the first call is used to fetch\r\n            * the content that in between spans and check if they are Keywords.\r\n            * The second is to wrap the rest of the code with data-rest spans.\r\n            * types can be rest for data-rest or Keyword for data-keyword-xc(x may be f for\r\n            * first or s for second and so on).\r\n            * */\r\n\r\n            before = content.replace(/([\\s\\S]*?)<span/, function(match, subPattern) {\r\n\r\n            // Explained below.\r\n            noSpans = true;\r\n\r\n            /* I can't use + instead of * the reason is:\r\n             *\r\n             * If i use + and i have nothing before the first span for example 'empty'<span>\r\n             * The regex engine will first get the first character because + means 1 or more\r\n             * so in our case where there is no characters before the first <span> the character that\r\n             * will be captured is < and than the engine will check if <span reached, But the problem is that\r\n             * we already passed < so the engine will try < against s which fail and the subPattern will\r\n             * fetch all characters until the next <span.\r\n             *\r\n             * I must use * because:\r\n             *\r\n             * The regex engine in case i use * will first take nothing because * means nothing until infinite,\r\n             * so after it takes nothing it checks for < and in case we don't have nothing before <span we have\r\n             * a match.\r\n             * */\r\n            if(subPattern.trim().length > 0) {\r\n\r\n                return replacement(subPattern, type, 'before', syntax, url);\r\n\r\n            }\r\n\r\n            // In case there is only spaces I will return the match as it is to keep the code structure intact.\r\n            return match;\r\n\r\n        });\r\n\r\n        var inBetween = before.replace(/<\\/span>([\\s\\S]*?)<span/g, function(match, subPattern) {\r\n\r\n            /* The reason for the trim().length > 0 is because I want the wrap only text\r\n             * between span's(closing to opening) for example '</span> <span',\r\n             * I don't want this space between the span's(closing to opening) i only want text '</span>someText<span'\r\n             * */\r\n             if(subPattern.trim().length > 0) {\r\n\r\n                return replacement(subPattern, type, 'inBetween', syntax, url);\r\n\r\n             }\r\n\r\n            // In case there is only spaces I will return the match as it is to keep the code structure intact.\r\n            return match;\r\n\r\n        });\r\n\r\n        // I must use + and not * in the pattern so the pattern won't wrap '' inside a span(<span data-rest></span>).\r\n        var after = inBetween.replace(/<\\/span>((?:(?!<\\/span>)[\\s\\S])+)$/, function(match, subPattern) {\r\n\r\n            if(subPattern.trim().length > 0) {\r\n\r\n                return replacement(subPattern, type, 'after', syntax, url);\r\n\r\n             }\r\n\r\n            // In case there is only spaces I will return the match as it is to keep the code structure intact.\r\n            return match;\r\n\r\n        });\r\n\r\n        /* The short if below is used for:\r\n         * \r\n         * This inBetweenAllSteps system will takes content that either from the begining of the content\r\n         * until before the first opening span tag, between closing span tags to opening span tags,\r\n         * after the last closing span tag until the end of the content.\r\n         * \r\n         * The problem is that this system won't know how to face with no spans at all.\r\n         * The first spans will be added after the first or second maybe third call to this function depending\r\n         * whether there are Keywords or comments or what ever the order is, that is why I'm using the short\r\n         * if statement below.\r\n         *\r\n         * Why I only set the noSpan inside the below phase?, the reason is because it will always\r\n         * be called(not replacement() will be called but the replace callback).\r\n         *\r\n         * The inBetween phase won't be called unless there are 2 spans: <span></span><span></span>\r\n         * The after phase will only be called if there is if there is at least 1 character after the\r\n         * last span closing tag.\r\n         * */\r\n        return noSpans ? after : replacement(after, type, null, syntax, url);\r\n    }\r\n\r\n    function formatContent(content, syntax, url, rootCall) {\r\n\r\n        /* About .replace(/</g, '&lt;').replace(/>/g, '&gt;')\r\n         *\r\n         * First let me say that I know that textarea element will auto escape < and > and I don't have to do it\r\n         * myself, but for any case where there is a browser that doesn't auto escapes < and > I do it.\r\n         *\r\n         * Before I \"return\" the formated content back into the innerHTML I must avoid any kind of markup,\r\n         * below I have listed few reasons why I must avoid any kind of markup:\r\n         *\r\n         * 1. If I add broken html for example: <a in front of my code the returned value from formatContent\r\n         *    will be  <span data-rest><a</span> the problem is that when innerHTML'd the browser will treat\r\n         *    <a</span> as tag opening for a element and it will also add closing </a> just before the end\r\n         *    of the code, and finally the data-rest was remain without closing tag so it will also add right\r\n         *    after the </a> closing tag another closing </span> tag for the data-rest.\r\n         * \r\n         * 2. Blink and Gecko will change the flawed html to a comment.\r\n         *    So for example <?adp> is considered flawed html because between < and > there\r\n         *    must be only a-z characters, and because its flawed it will become <!--?adp--> and be wrapped\r\n         *    unnecessary data-rest that will contain this comment and it also just take space(simular to padding,\r\n         *    in our case top padding) inside the code element because the unnecessary but exist data-rest span.\r\n         *\r\n         * 3. If I just insert <p> before the code the browser will autocomplete the closing p tag just before\r\n         *    the end of the code element, the problem is that now it wrapped the </span> tag for data-rest that\r\n         *    from the start was wrapping the <p>, so the result is data-rest tag without closing tag so the\r\n         *    browser will autocomplete this closing tag right after the p closing tag and right before the code element\r\n         *    closing tag.\r\n         *\r\n         * 4. Interesting case may happen in I add <span> into the code, it will depending on where I insert the\r\n         *    opening <span> tag the problem may be different, for example if I insert the <span> somewhere\r\n         *    in the code but before the first blockComment only the before phase inside inBetweenAllSteps\r\n         *    will be triggered because the <span> tag in the middle of the code, now the replacement will\r\n         *    not be called manually because the flag(noSpans) inside before phase was set to true, and now\r\n         *    the problem is that blockComments only get content that is before the <span>, now if there is no\r\n         *    blockComments before the <span> the inBetweenAllSteps for blockComments will pass away and\r\n         *    continue to the next inBetweenAllSteps for singleLineComments, but wait\r\n         *    it gets more funnier, its a chain problem, because the blockComments didn't change anything\r\n         *    so singleLineComments will have the same problem as before, the result is that both block and single\r\n         *    line comments will be left behind and gets broken by the other stations.\r\n         *    \r\n         *    In some cases where singleLineComments or blockComments are placed before the <span> and there\r\n         *    is some code and then another singleLineComments(if before was blockComments it should\r\n         *    also be blockComments) there will be a problem because the result is something like:\r\n         *    \r\n         *    <span>comment</span><span>some code<span>comment</span>\r\n         *\r\n         *    The problem is that only the comments(single, block) stations was reached, now when the rest of\r\n         *    the stations will want to interact with the content they won't have the chance since the code\r\n         *    'some code' is between <span>some code<span> its opening span tag and another opening span tag\r\n         *    and there is no inBetweenAllSteps phase to fetch content inside <span><span>\r\n         *\r\n         * 5. Depending on the place where <span> will be placed we will know what content will be skiped, the\r\n         *    last problem is that when innerHTML'd the browser will autocomplete the <span> closing tag, the\r\n         *    order is: <span>skiped code<span data-x>x-content</span><span data-y>y-content</span></span>\r\n         *    as you can see the skiped code along with the special spans(keywords, strings) will be contained inside the <span>\r\n         *\r\n         * The url parameter will be passed to functions that alerts the user about syntax problems, so to help\r\n         * the user identify the file I also pass the url, for cases where there is no data-url the function\r\n         * that responsible for alerting the user about the syntax problem will take care for that kind of cases.\r\n         * */\r\n\r\n         // About .replace(/^[\\r\\n]*/, '').replace(/[\\r\\n]*$/, '')\r\n       \r\n       /* The replace is optional and only be applied if the rootCall parameter is set to true,\r\n        * why only then is explained in the rootCall parameter explanation below, this is the explanation\r\n        * for the replace itself and its affect over the content...\r\n        *\r\n        * I remove \\r and \\n from the beginning and ending of codes, if the user have for convenience\r\n        * purposes, some \\r and \\n I don't want it to affect the height of the code element(and I assume\r\n        * the user didn't expect it to affect the height as I do), notice that\r\n        * if the regexp for both beginning and ending will encounter any kind of character\r\n        * that isn't a \\r or \\n it will finish the \"triming\" action, so for example:\r\n        *\r\n        * \\r\\n\r\n        * ' '\r\n        * \\r\\n\r\n        * some code is here\r\n        *\r\n        * Notice that the first \\r\\n will be removed from the beginning but because the ' ', the regexp\r\n        * will stop matching, hence we have:\r\n        *\r\n        * ' '\r\n        * \\r\\n\r\n        * some code is here\r\n        *\r\n        * As you can see only the \\r\\n before the ' ' was removed.\r\n        *\r\n        * About the rootCall:\r\n        *\r\n        * The rootCall parameter is set to true only for the main call for this function, meaning\r\n        * the main call that accepts the full content, you may have noticed that the rootCall parameter\r\n        * is being checked and if true the replace with the \\r\\n will be applied, the reason is that\r\n        * I don't want to do the so called \"triming\" action as described above to internal \"sections\"(\r\n        * when I say sections I mean for cases where I have multiple syntaxes, for example css inside\r\n        * style tags, javascript inside script tags and so on...) as the internal new lines within\r\n        * sections are considered(at least for me) \"by user\" new lines, meaning they were set in purpose\r\n        * by the user to format code, unlike my assumption over the entire code where I don't think the\r\n        * user expect that lines between the end/start of code will to textarea open/close tag will affect\r\n        * the element height, this case I do think the user meant EVERY SINGLE LINE.\r\n        *\r\n        * Simply put the above statements:\r\n        * <script>, <style> and so on internal content will remain untouched, but the entire code\r\n        * edges will be \"line trimed\".\r\n        * */\r\n        content = content.replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n\r\n        // Explained above\r\n        if(rootCall) {\r\n\r\n            content = content.replace(/^[\\r\\n]*/, '').replace(/[\\r\\n]*$/, '');\r\n\r\n        }\r\n\r\n        var steps = [];\r\n\r\n        switch(syntax) {\r\n\r\n            case 'markup':\r\n\r\n                steps.push('commentsMarkup');\r\n                steps.push('markupOpeningTags');\r\n                steps.push('markupClosingTags');\r\n                steps.push('docType');\r\n\r\n            break;\r\n\r\n            case 'php':\r\n\r\n                steps.push('commentsBlock');\r\n                steps.push('commentsSingle');\r\n\r\n               /* No need for stringsGeneral, read getStrings for more information.\r\n                * The stringsPhp step must appear before the rest of the steps(keywords, numbers, etc).\r\n                * */\r\n                steps.push('stringsPhp');\r\n                steps.push('keywordsFC');\r\n                steps.push('keywordsSC');\r\n                steps.push('keywordsTC');\r\n\r\n               /* There is no reason for keeping any kind of order between the phpVariables and the phpFunctions steps,\r\n                * not like the rule for keeping order between the two inside the 'javascript' case, the reason for\r\n                * not keeping any order here is that php variables must start with $ or one of the\r\n                * supported privileges(public, protected, private, static).\r\n                * */\r\n                steps.push('phpVariables');\r\n                steps.push('phpFunctions');\r\n\r\n               /* The numbers step must appear after the phpVariables and phpFunctions steps because identifiers can\r\n                * contain numbers, hence using numbers step before each of the steps may shorten a variable name,\r\n                * for example with $obj2 the output: <span data-variable>$obj</span><span data-number>2</span>\r\n                *\r\n                * With php functions its also a problem, with function mor3u() {} the 'mor' will be wrappe as span with\r\n                * data-rest, 3 with data-number and u with data-function\r\n                * */\r\n                steps.push('numbers');\r\n\r\n            break;\r\n\r\n            case 'stylesheet':\r\n\r\n                steps.push('commentsBlock');\r\n                steps.push('stylesheetImport');\r\n                steps.push('stylesheetRules');\r\n                steps.push('stylesheetSelectors');\r\n\r\n            break;\r\n\r\n            case 'javascript':\r\n\r\n                steps.push('commentsBlock');\r\n                steps.push('commentsSingle');\r\n                steps.push('stringsGeneral');\r\n                steps.push('keywordsFC');\r\n                steps.push('keywordsSC');\r\n                steps.push('keywordsTC');\r\n\r\n               /* Within this 'javascript' case the javascriptFunction step must appear before javascriptVariables\r\n                * step, the reason is that in javascript variables identifiers are the same as function identifiers,\r\n                * if I will use javascriptVariables before javascriptFunctions I will pick up any identifier, the\r\n                * javascriptFunction step is more specific and won't interrupt the javascriptVariables step because\r\n                * the requirement for ( after function identifier, I don't need to keep this order within the 'php' case\r\n                * the reason is well explained there.\r\n                * */\r\n                steps.push('javascriptFunctions');\r\n                steps.push('javascriptVariables');\r\n\r\n               /* The numbers step must appear after the phpVariables and phpFunctions steps because identifiers can\r\n                * contain numbers, hence using numbers step before each of the steps may shorten a variable name,\r\n                * for example with function functionName9() {}, phpFunctions pattern will check for ( and if 9 will\r\n                * be wrapped with span the functionName will be wrapped as variable and not as a function.\r\n                * \r\n                * With variables it can shorten the variable length, if within var name5 the name5 should be wrapped\r\n                * only the name will be wrapped, or var name2name both 'name' will be wrapped without the 2 in between them.\r\n                * */\r\n                steps.push('numbers');\r\n\r\n            break;\r\n\r\n            case '*':\r\n\r\n                steps.push('insideJavascript');\r\n                steps.push('insidePhp');\r\n                steps.push('insideStylesheet');\r\n\r\n               /* The following markup steps(functions) can't appear before insideJavascript/insidePhp/insideX steps\r\n                * because if the steps(functions) appear before they won't know to recognize what is markup and what\r\n                * is javascript or php, the logic is simple, each insideFunction(php/javascript/etc) will\r\n                * know its boundaries(opening/closing tags) but with markup getting the\r\n                * content before/inBetween/after EACH markup will be a maintenance problem as when any new\r\n                * syntax be added the syntax should know its boundaries and the markup steps should also\r\n                * know how to avoid getting content from those boundaries, the idea is simple, each syntax know its\r\n                * boundaries and the markup gets the \"left over\" content, this way when I add new syntax I only need\r\n                * to make the syntax insideFunction \"familiar\" with its own boundaries without having to edit the\r\n                * markup functions.\r\n                * */\r\n                steps.push('commentsMarkup');\r\n                steps.push('markupOpeningTags');\r\n                steps.push('markupClosingTags');\r\n                steps.push('docType');\r\n\r\n            break;\r\n\r\n        }\r\n\r\n        // All syntaxes get rest.\r\n        steps.push('rest');\r\n\r\n        for(var key in steps) {\r\n\r\n            content = inBetweenAllSteps(content, steps[key], syntax, url);\r\n\r\n        }\r\n\r\n        return content;\r\n\r\n    }\r\n\r\n    utils.addListener(window, 'load', init);\r\n\r\n})(window, document);"],"sourceRoot":"/source/"}